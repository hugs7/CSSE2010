
Lab12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000000e4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000791  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  00000989  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023e  00000000  00000000  00001081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e0  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ee       	ldi	r30, 0xE4	; 228
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 31       	cpi	r26, 0x10	; 16
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  a2:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <main>:

int main(void) {
	uint8_t digit;
	
	/* Set port A pins to be outputs, port C pins to be inputs */
	DDRA = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	81 b9       	out	0x01, r24	; 1
	DDRC = 0;    /* This is the default, could omit. */
  ae:	17 b8       	out	0x07, r1	; 7
	DDRB = 0x04F;
  b0:	8f e4       	ldi	r24, 0x4F	; 79
  b2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x01;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0x00;
  b8:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
  ba:	1b b8       	out	0x0b, r1	; 11
	while(1) {
		/* Read in a digit from lower half of port C pins */
		/* We read the whole byte and mask out upper bits */
		digit = PINC & 0x0F;
  bc:	e6 b1       	in	r30, 0x06	; 6
  be:	ef 70       	andi	r30, 0x0F	; 15
		/* Write out seven segment display value to port A */
		PORTA = seven_seg[digit];
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	e0 50       	subi	r30, 0x00	; 0
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	80 81       	ld	r24, Z
  c8:	82 b9       	out	0x02, r24	; 2
		PORTB = PINC;
  ca:	86 b1       	in	r24, 0x06	; 6
  cc:	85 b9       	out	0x05, r24	; 5
		PORTD ^= 0x01;
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	89 27       	eor	r24, r25
  d4:	8b b9       	out	0x0b, r24	; 11
		PORTB ^= 0x40;
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	89 27       	eor	r24, r25
  dc:	85 b9       	out	0x05, r24	; 5
  de:	ee cf       	rjmp	.-36     	; 0xbc <main+0x12>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
