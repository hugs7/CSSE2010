
diamondminers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015c  00800100  00002494  00002528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002494  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000235  0080025c  0080025c  00002684  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003273  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001253  00000000  00000000  00005cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fb5  00000000  00000000  00006f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ec  00000000  00000000  00008edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e0f  00000000  00000000  000098c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024e4  00000000  00000000  0000a6d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  0000cbbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
       4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_5>
      18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      40:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__vector_16>
      44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      50:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__vector_20>
      54:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__vector_21>
      58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      70:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2481>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2449>:
      a4:	43 68 65 61 74 73 3a 20 6f 66 66 00                 Cheats: off.

000000b0 <__c.2447>:
      b0:	44 69 61 6d 6f 6e 64 73 20 43 6f 6c 6c 65 63 74     Diamonds Collect
      c0:	65 64 3a 20 30 00                                   ed: 0.

000000c6 <__c.2438>:
      c6:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
      d6:	20 62 79 20 48 75 67 6f 20 42 75 72 74 6f 6e 00      by Hugo Burton.

000000e6 <__c.2436>:
      e6:	44 69 61 6d 6f 6e 64 20 4d 69 6e 65 72 73 00        Diamond Miners.

000000f5 <__c.2040>:
      f5:	1b 5b 32 4a 00                                      .[2J.

000000fa <__c.2025>:
      fa:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d8 e0       	ldi	r29, 0x08	; 8
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	12 e0       	ldi	r17, 0x02	; 2
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	e4 e9       	ldi	r30, 0x94	; 148
     118:	f4 e2       	ldi	r31, 0x24	; 36
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	ac 35       	cpi	r26, 0x5C	; 92
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
     126:	24 e0       	ldi	r18, 0x04	; 4
     128:	ac e5       	ldi	r26, 0x5C	; 92
     12a:	b2 e0       	ldi	r27, 0x02	; 2
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a1 39       	cpi	r26, 0x91	; 145
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
     136:	0e 94 bc 0a 	call	0x1578	; 0x1578 <main>
     13a:	0c 94 48 12 	jmp	0x2490	; 0x2490 <_exit>

0000013e <__bad_interrupt>:
     13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     142:	e8 e6       	ldi	r30, 0x68	; 104
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	82 60       	ori	r24, 0x02	; 2
     14a:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     14c:	8b b3       	in	r24, 0x1b	; 27
     14e:	82 60       	ori	r24, 0x02	; 2
     150:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     152:	ec e6       	ldi	r30, 0x6C	; 108
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	8f 60       	ori	r24, 0x0F	; 15
     15a:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     15c:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <__data_end>
     160:	08 95       	ret

00000162 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     162:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     166:	18 16       	cp	r1, r24
     168:	14 f5       	brge	.+68     	; 0x1ae <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     16a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     16e:	6f b7       	in	r22, 0x3f	; 63
		cli();
     170:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	09 c0       	rjmp	.+18     	; 0x188 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     176:	f9 01       	movw	r30, r18
     178:	e3 5a       	subi	r30, 0xA3	; 163
     17a:	fd 4f       	sbci	r31, 0xFD	; 253
     17c:	40 81       	ld	r20, Z
     17e:	f9 01       	movw	r30, r18
     180:	e4 5a       	subi	r30, 0xA4	; 164
     182:	fd 4f       	sbci	r31, 0xFD	; 253
     184:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     186:	9f 5f       	subi	r25, 0xFF	; 255
     188:	29 2f       	mov	r18, r25
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 91 5c 02 	lds	r20, 0x025C	; 0x80025c <__data_end>
     190:	04 2e       	mov	r0, r20
     192:	00 0c       	add	r0, r0
     194:	55 0b       	sbc	r21, r21
     196:	24 17       	cp	r18, r20
     198:	35 07       	cpc	r19, r21
     19a:	6c f3       	brlt	.-38     	; 0x176 <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     19c:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <__data_end>
     1a0:	91 50       	subi	r25, 0x01	; 1
     1a2:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <__data_end>
		
		if(interrupts_were_enabled) {
     1a6:	66 23       	and	r22, r22
     1a8:	1c f4       	brge	.+6      	; 0x1b0 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     1aa:	78 94       	sei
     1ac:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     1b0:	08 95       	ret

000001b2 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     1b2:	1f 92       	push	r1
     1b4:	0f 92       	push	r0
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	0f 92       	push	r0
     1ba:	11 24       	eor	r1, r1
     1bc:	2f 93       	push	r18
     1be:	3f 93       	push	r19
     1c0:	4f 93       	push	r20
     1c2:	8f 93       	push	r24
     1c4:	9f 93       	push	r25
     1c6:	ef 93       	push	r30
     1c8:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1ca:	43 b1       	in	r20, 0x03	; 3
     1cc:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	26 c0       	rjmp	.+76     	; 0x21e <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     1d2:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <__data_end>
     1d6:	94 30       	cpi	r25, 0x04	; 4
     1d8:	0c f5       	brge	.+66     	; 0x21c <__vector_5+0x6a>
     1da:	24 2f       	mov	r18, r20
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	08 2e       	mov	r0, r24
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__vector_5+0x34>
     1e2:	35 95       	asr	r19
     1e4:	27 95       	ror	r18
     1e6:	0a 94       	dec	r0
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <__vector_5+0x30>
     1ea:	20 ff       	sbrs	r18, 0
     1ec:	17 c0       	rjmp	.+46     	; 0x21c <__vector_5+0x6a>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     1ee:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <last_button_state>
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	08 2e       	mov	r0, r24
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <__vector_5+0x4a>
     1f8:	35 95       	asr	r19
     1fa:	27 95       	ror	r18
     1fc:	0a 94       	dec	r0
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     200:	20 fd       	sbrc	r18, 0
     202:	0c c0       	rjmp	.+24     	; 0x21c <__vector_5+0x6a>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     204:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <__data_end>
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	9e 0f       	add	r25, r30
     20c:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <__data_end>
     210:	0e 2e       	mov	r0, r30
     212:	00 0c       	add	r0, r0
     214:	ff 0b       	sbc	r31, r31
     216:	e3 5a       	subi	r30, 0xA3	; 163
     218:	fd 4f       	sbci	r31, 0xFD	; 253
     21a:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	84 30       	cpi	r24, 0x04	; 4
     220:	c0 f2       	brcs	.-80     	; 0x1d2 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     222:	40 93 61 02 	sts	0x0261, r20	; 0x800261 <last_button_state>
     226:	ff 91       	pop	r31
     228:	ef 91       	pop	r30
     22a:	9f 91       	pop	r25
     22c:	8f 91       	pop	r24
     22e:	4f 91       	pop	r20
     230:	3f 91       	pop	r19
     232:	2f 91       	pop	r18
     234:	0f 90       	pop	r0
     236:	0f be       	out	0x3f, r0	; 63
     238:	0f 90       	pop	r0
     23a:	1f 90       	pop	r1
     23c:	18 95       	reti

0000023e <initialise_display>:
static const uint8_t miners_display[MATRIX_NUM_COLUMNS] = 
		{125, 69, 69, 57, 0, 16, 56, 124, 56, 16, 0, 125, 33, 17, 33, 125};

void initialise_display(void) {
	// clear the LED matrix
	ledmatrix_clear();
     23e:	0e 94 53 07 	call	0xea6	; 0xea6 <ledmatrix_clear>
     242:	08 95       	ret

00000244 <start_display>:
}

void start_display(void) {
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	28 97       	sbiw	r28, 0x08	; 8
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     25a:	0e 94 53 07 	call	0xea6	; 0xea6 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	29 c0       	rjmp	.+82     	; 0x2b4 <start_display+0x70>
		col_data = miners_display[col];
     262:	e1 2f       	mov	r30, r17
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	e8 5e       	subi	r30, 0xE8	; 232
     268:	fe 4f       	sbci	r31, 0xFE	; 254
     26a:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     26c:	90 ff       	sbrs	r25, 0
     26e:	02 c0       	rjmp	.+4      	; 0x274 <start_display+0x30>
			colour = COLOUR_RED;
     270:	2f e0       	ldi	r18, 0x0F	; 15
     272:	01 c0       	rjmp	.+2      	; 0x276 <start_display+0x32>
		} else {
			colour = COLOUR_GREEN;
     274:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     276:	87 e0       	ldi	r24, 0x07	; 7
     278:	13 c0       	rjmp	.+38     	; 0x2a0 <start_display+0x5c>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     27a:	99 23       	and	r25, r25
     27c:	44 f4       	brge	.+16     	; 0x28e <start_display+0x4a>
				column_colour_data[i] = colour;
     27e:	e1 e0       	ldi	r30, 0x01	; 1
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ec 0f       	add	r30, r28
     284:	fd 1f       	adc	r31, r29
     286:	e8 0f       	add	r30, r24
     288:	f1 1d       	adc	r31, r1
     28a:	20 83       	st	Z, r18
     28c:	07 c0       	rjmp	.+14     	; 0x29c <start_display+0x58>
				} else {
				column_colour_data[i] = 0;
     28e:	e1 e0       	ldi	r30, 0x01	; 1
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ec 0f       	add	r30, r28
     294:	fd 1f       	adc	r31, r29
     296:	e8 0f       	add	r30, r24
     298:	f1 1d       	adc	r31, r1
     29a:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     29c:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     29e:	81 50       	subi	r24, 0x01	; 1
     2a0:	81 11       	cpse	r24, r1
     2a2:	eb cf       	rjmp	.-42     	; 0x27a <start_display+0x36>
				} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     2a4:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     2a6:	be 01       	movw	r22, r28
     2a8:	6f 5f       	subi	r22, 0xFF	; 255
     2aa:	7f 4f       	sbci	r23, 0xFF	; 255
     2ac:	81 2f       	mov	r24, r17
     2ae:	0e 94 36 07 	call	0xe6c	; 0xe6c <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     2b2:	1f 5f       	subi	r17, 0xFF	; 255
     2b4:	10 31       	cpi	r17, 0x10	; 16
     2b6:	a8 f2       	brcs	.-86     	; 0x262 <start_display+0x1e>
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
}
     2b8:	28 96       	adiw	r28, 0x08	; 8
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	08 95       	ret

000002cc <update_square_colour>:

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// first check that this is a square within the game field
	// if outside the game field, don't update anything
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
     2cc:	80 31       	cpi	r24, 0x10	; 16
     2ce:	18 f5       	brcc	.+70     	; 0x316 <update_square_colour+0x4a>
     2d0:	68 30       	cpi	r22, 0x08	; 8
     2d2:	08 f5       	brcc	.+66     	; 0x316 <update_square_colour+0x4a>
		return;
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER) {
     2d4:	41 30       	cpi	r20, 0x01	; 1
     2d6:	81 f0       	breq	.+32     	; 0x2f8 <update_square_colour+0x2c>
		colour = MATRIX_COLOUR_PLAYER;
	} else if (object == FACING) {
     2d8:	42 30       	cpi	r20, 0x02	; 2
     2da:	81 f0       	breq	.+32     	; 0x2fc <update_square_colour+0x30>
		colour = MATRIX_COLOUR_FACING;
	} else if (object == BREAKABLE || object == UNBREAKABLE) {
     2dc:	9d ef       	ldi	r25, 0xFD	; 253
     2de:	94 0f       	add	r25, r20
     2e0:	92 30       	cpi	r25, 0x02	; 2
     2e2:	70 f0       	brcs	.+28     	; 0x300 <update_square_colour+0x34>
		colour = MATRIX_COLOUR_WALL;
	} else if (object == DIS_BREAK) {
     2e4:	47 30       	cpi	r20, 0x07	; 7
     2e6:	71 f0       	breq	.+28     	; 0x304 <update_square_colour+0x38>
		colour = MATRIX_COLOUR_DIS_BREAKABLE;
	} else if (object == DIAMOND) {
     2e8:	45 30       	cpi	r20, 0x05	; 5
     2ea:	71 f0       	breq	.+28     	; 0x308 <update_square_colour+0x3c>
		colour = MATRIX_COLOUR_DIAMOND;
	} else if (object == UNDISCOVERED) {
     2ec:	46 30       	cpi	r20, 0x06	; 6
     2ee:	71 f0       	breq	.+28     	; 0x30c <update_square_colour+0x40>
		colour = MATRIX_COLOUR_UNDISCOVERED;
	} else if (object == BOMB) {
     2f0:	48 30       	cpi	r20, 0x08	; 8
     2f2:	71 f4       	brne	.+28     	; 0x310 <update_square_colour+0x44>
		colour = MATRIX_COLOUR_BOMB;
     2f4:	4c e3       	ldi	r20, 0x3C	; 60
     2f6:	0d c0       	rjmp	.+26     	; 0x312 <update_square_colour+0x46>
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER) {
		colour = MATRIX_COLOUR_PLAYER;
     2f8:	4f e0       	ldi	r20, 0x0F	; 15
     2fa:	0b c0       	rjmp	.+22     	; 0x312 <update_square_colour+0x46>
	} else if (object == FACING) {
		colour = MATRIX_COLOUR_FACING;
     2fc:	41 e0       	ldi	r20, 0x01	; 1
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <update_square_colour+0x46>
	} else if (object == BREAKABLE || object == UNBREAKABLE) {
		colour = MATRIX_COLOUR_WALL;
     300:	4f ed       	ldi	r20, 0xDF	; 223
     302:	07 c0       	rjmp	.+14     	; 0x312 <update_square_colour+0x46>
	} else if (object == DIS_BREAK) {
		colour = MATRIX_COLOUR_DIS_BREAKABLE;
     304:	43 e1       	ldi	r20, 0x13	; 19
     306:	05 c0       	rjmp	.+10     	; 0x312 <update_square_colour+0x46>
	} else if (object == DIAMOND) {
		colour = MATRIX_COLOUR_DIAMOND;
     308:	40 ef       	ldi	r20, 0xF0	; 240
     30a:	03 c0       	rjmp	.+6      	; 0x312 <update_square_colour+0x46>
	} else if (object == UNDISCOVERED) {
		colour = MATRIX_COLOUR_UNDISCOVERED;
     30c:	45 e3       	ldi	r20, 0x35	; 53
     30e:	01 c0       	rjmp	.+2      	; 0x312 <update_square_colour+0x46>
	} else if (object == BOMB) {
		colour = MATRIX_COLOUR_BOMB;
	} else {
		// anything unexpected (or empty) will be black
		colour = MATRIX_COLOUR_EMPTY;
     310:	40 e0       	ldi	r20, 0x00	; 0
	}

	// update the pixel at the given location with this colour
	ledmatrix_update_pixel(x, y, colour);
     312:	0e 94 17 07 	call	0xe2e	; 0xe2e <ledmatrix_update_pixel>
     316:	08 95       	ret

00000318 <initialise_game_state>:
 * initialise the game state, sets up the playing field, visibility
 * the player and the player direction indicator
 */
void initialise_game_state(void) {
	// initialise the player position and the facing position
	player_x = PLAYER_START_X;
     318:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <player_x>
	player_y = PLAYER_START_Y;
     31c:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <player_y>
	facing_x = FACING_START_X;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <facing_x>
	facing_y = FACING_START_Y;
     326:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <facing_y>
	facing_visible = 1;
     32a:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <facing_visible>
	
	cheats = 0;
     32e:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <cheats>
	diamonds = 0;
     332:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <diamonds>
	steps = 0;
     336:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <steps>
	paused = 0;
     33a:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <paused>
	game_over = 0;
     33e:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <game_over>
	field_of_view = 0;
     342:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <field_of_view>
		
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	3a c0       	rjmp	.+116    	; 0x3c0 <initialise_game_state+0xa8>
		for (int y = 0; y < HEIGHT; y++) {
			// initialise this square based on the starting layout
			// the indices here are to ensure the starting layout
			// could be easily visualised when declared
			//playing_field[x][y] = starting_layout[HEIGHT - 1 - y][x];  // original
			playing_field[x][y] = levels[level_select % NUM][HEIGHT - 1 - y][x];
     34c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <level_select>
     350:	48 2f       	mov	r20, r24
     352:	41 70       	andi	r20, 0x01	; 1
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	e7 e0       	ldi	r30, 0x07	; 7
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	e2 1b       	sub	r30, r18
     35c:	f3 0b       	sbc	r31, r19
     35e:	ca 01       	movw	r24, r20
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	e8 0f       	add	r30, r24
     36e:	f9 1f       	adc	r31, r25
     370:	e2 95       	swap	r30
     372:	f2 95       	swap	r31
     374:	f0 7f       	andi	r31, 0xF0	; 240
     376:	fe 27       	eor	r31, r30
     378:	e0 7f       	andi	r30, 0xF0	; 240
     37a:	fe 27       	eor	r31, r30
     37c:	e5 5a       	subi	r30, 0xA5	; 165
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	e6 0f       	add	r30, r22
     382:	f7 1f       	adc	r31, r23
     384:	a0 81       	ld	r26, Z
     386:	cb 01       	movw	r24, r22
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	fc 01       	movw	r30, r24
     396:	e3 59       	subi	r30, 0x93	; 147
     398:	fd 4f       	sbci	r31, 0xFD	; 253
     39a:	e2 0f       	add	r30, r18
     39c:	f3 1f       	adc	r31, r19
     39e:	a0 83       	st	Z, r26

			// set all squares to start not visible, this will be
			// updated once the display is initialised as well
			visible[x][y] = 0;
     3a0:	80 51       	subi	r24, 0x10	; 16
     3a2:	9d 4f       	sbci	r25, 0xFD	; 253
     3a4:	fc 01       	movw	r30, r24
     3a6:	e2 0f       	add	r30, r18
     3a8:	f3 1f       	adc	r31, r19
     3aa:	10 82       	st	Z, r1
	game_over = 0;
	field_of_view = 0;
		
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
     3ac:	2f 5f       	subi	r18, 0xFF	; 255
     3ae:	3f 4f       	sbci	r19, 0xFF	; 255
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <initialise_game_state+0x9e>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	28 30       	cpi	r18, 0x08	; 8
     3b8:	31 05       	cpc	r19, r1
     3ba:	44 f2       	brlt	.-112    	; 0x34c <initialise_game_state+0x34>
	paused = 0;
	game_over = 0;
	field_of_view = 0;
		
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
     3bc:	6f 5f       	subi	r22, 0xFF	; 255
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	60 31       	cpi	r22, 0x10	; 16
     3c2:	71 05       	cpc	r23, r1
     3c4:	b4 f3       	brlt	.-20     	; 0x3b2 <initialise_game_state+0x9a>
			// set all squares to start not visible, this will be
			// updated once the display is initialised as well
			visible[x][y] = 0;
		}
	}	
}
     3c6:	08 95       	ret

000003c8 <in_bounds>:
	initialise_game_display();
}

uint8_t in_bounds(uint8_t x, uint8_t y) {
	// a square is in bounds if 0 <= x < WIDTH && 0 <= y < HEIGHT
	return x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT;
     3c8:	80 31       	cpi	r24, 0x10	; 16
     3ca:	20 f4       	brcc	.+8      	; 0x3d4 <in_bounds+0xc>
     3cc:	68 30       	cpi	r22, 0x08	; 8
     3ce:	20 f0       	brcs	.+8      	; 0x3d8 <in_bounds+0x10>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	08 95       	ret
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	08 95       	ret
     3d8:	81 e0       	ldi	r24, 0x01	; 1
}
     3da:	08 95       	ret

000003dc <get_object_at>:

uint8_t get_object_at(uint8_t x, uint8_t y) {
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	c8 2f       	mov	r28, r24
     3e6:	d6 2f       	mov	r29, r22
	// check the bounds, anything outside the bounds
	// will be considered an unbreakable wall
	// next level portal
	if (x == 16 && y == 4) {
     3e8:	80 31       	cpi	r24, 0x10	; 16
     3ea:	f9 f4       	brne	.+62     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     3ec:	64 30       	cpi	r22, 0x04	; 4
     3ee:	e9 f4       	brne	.+58     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     3f0:	10 c0       	rjmp	.+32     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		// check for existing diamonds
		
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
				uint8_t object = get_object_at(x, y);
     3f2:	6c 2f       	mov	r22, r28
     3f4:	80 2f       	mov	r24, r16
     3f6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
				if (object == DIAMOND) {
     3fa:	85 30       	cpi	r24, 0x05	; 5
     3fc:	51 f1       	breq	.+84     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	// next level portal
	if (x == 16 && y == 4) {
		// check for existing diamonds
		
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
     3fe:	21 96       	adiw	r28, 0x01	; 1
     400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     402:	c0 e0       	ldi	r28, 0x00	; 0
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	c8 30       	cpi	r28, 0x08	; 8
     408:	d1 05       	cpc	r29, r1
     40a:	9c f3       	brlt	.-26     	; 0x3f2 <get_object_at+0x16>
	// will be considered an unbreakable wall
	// next level portal
	if (x == 16 && y == 4) {
		// check for existing diamonds
		
		for (int x = 0; x < WIDTH; x++) {
     40c:	0f 5f       	subi	r16, 0xFF	; 255
     40e:	1f 4f       	sbci	r17, 0xFF	; 255
     410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     412:	00 e0       	ldi	r16, 0x00	; 0
     414:	10 e0       	ldi	r17, 0x00	; 0
     416:	00 31       	cpi	r16, 0x10	; 16
     418:	11 05       	cpc	r17, r1
     41a:	9c f3       	brlt	.-26     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			}
		}
		
		// if no diamonds left
		// change level
		level_select++;
     41c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <level_select>
     420:	8f 5f       	subi	r24, 0xFF	; 255
     422:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <level_select>
		
		return NEXT_LEVEL;
     426:	89 e0       	ldi	r24, 0x09	; 9
     428:	17 c0       	rjmp	.+46     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	} else if (!in_bounds(x,y)) {
     42a:	6d 2f       	mov	r22, r29
     42c:	8c 2f       	mov	r24, r28
     42e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <in_bounds>
     432:	88 23       	and	r24, r24
     434:	81 f0       	breq	.+32     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		return UNBREAKABLE;
	} else {
		//if in the bounds, just index into the array
		return playing_field[x][y];
     436:	ec 2f       	mov	r30, r28
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	e3 59       	subi	r30, 0x93	; 147
     448:	fd 4f       	sbci	r31, 0xFD	; 253
     44a:	ed 0f       	add	r30, r29
     44c:	f1 1d       	adc	r31, r1
     44e:	80 81       	ld	r24, Z
     450:	03 c0       	rjmp	.+6      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
		
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
				uint8_t object = get_object_at(x, y);
				if (object == DIAMOND) {
					return UNBREAKABLE;
     452:	84 e0       	ldi	r24, 0x04	; 4
     454:	01 c0       	rjmp	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
		// change level
		level_select++;
		
		return NEXT_LEVEL;
	} else if (!in_bounds(x,y)) {
		return UNBREAKABLE;
     456:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		//if in the bounds, just index into the array
		return playing_field[x][y];
	}
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	08 95       	ret

00000462 <flash_facing>:

void flash_facing(void) {
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
	// only flash the facing cursor if it is in bounds
	if (in_bounds(facing_x, facing_y)) {
     466:	d0 91 73 03 	lds	r29, 0x0373	; 0x800373 <facing_y>
     46a:	c0 91 76 03 	lds	r28, 0x0376	; 0x800376 <facing_x>
     46e:	6d 2f       	mov	r22, r29
     470:	8c 2f       	mov	r24, r28
     472:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <in_bounds>
     476:	88 23       	and	r24, r24
     478:	d9 f0       	breq	.+54     	; 0x4b0 <flash_facing+0x4e>
		if (facing_visible) {
     47a:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <facing_visible>
     47e:	88 23       	and	r24, r24
     480:	61 f0       	breq	.+24     	; 0x49a <flash_facing+0x38>
			// we need to flash the facing cursor off, it should be replaced by
			// the colour of the piece which is at that location
			uint8_t piece_at_cursor = get_object_at(facing_x, facing_y);
     482:	6d 2f       	mov	r22, r29
     484:	8c 2f       	mov	r24, r28
     486:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
			update_square_colour(facing_x, facing_y, piece_at_cursor);
     48a:	48 2f       	mov	r20, r24
     48c:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     490:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     494:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <flash_facing+0x42>
		
		} else {
			// we need to flash the facing cursor on
			update_square_colour(facing_x, facing_y, FACING);
     49a:	42 e0       	ldi	r20, 0x02	; 2
     49c:	6d 2f       	mov	r22, r29
     49e:	8c 2f       	mov	r24, r28
     4a0:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
		}
		facing_visible = 1 - facing_visible; //alternate between 0 and 1
     4a4:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <facing_visible>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	89 1b       	sub	r24, r25
     4ac:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <facing_visible>
	}
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <flash_diamond>:

void flash_diamond(void) {
	if (paused == 1) {
     4b6:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <paused>
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	21 f0       	breq	.+8      	; 0x4c6 <flash_diamond+0x10>
		return;
	}
	
	PORTD ^= (1 << 3);
     4be:	9b b1       	in	r25, 0x0b	; 11
     4c0:	88 e0       	ldi	r24, 0x08	; 8
     4c2:	89 27       	eor	r24, r25
     4c4:	8b b9       	out	0x0b, r24	; 11
     4c6:	08 95       	ret

000004c8 <get_steps>:
}

uint8_t get_steps() {
	return steps;
}
     4c8:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <steps>
     4cc:	08 95       	ret

000004ce <is_game_over>:
}

uint8_t is_game_over(void) {
	// initially the game never ends
	return game_over;
}
     4ce:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <game_over>
     4d2:	08 95       	ret

000004d4 <discoverable_dfs>:
 * given an (x,y) coordinate, perform a depth first search to make any
 * squares reachable from here visible. If a wall is broken at a position
 * (x,y), this function should be called with coordinates (x,y)
 * YOU SHOULD NOT NEED TO MODIFY THIS FUNCTION
 */
void discoverable_dfs(uint8_t x, uint8_t y) {
     4d4:	5f 92       	push	r5
     4d6:	6f 92       	push	r6
     4d8:	7f 92       	push	r7
     4da:	8f 92       	push	r8
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	78 2e       	mov	r7, r24
     4f4:	66 2e       	mov	r6, r22
	uint8_t x_adj, y_adj, object_here;
	int left_bound = player_x - 2;
     4f6:	c0 91 72 03 	lds	r28, 0x0372	; 0x800372 <player_x>
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
     4fc:	6e 01       	movw	r12, r28
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	c8 1a       	sub	r12, r24
     502:	d1 08       	sbc	r13, r1
	int right_bound = player_x + 2;
     504:	22 96       	adiw	r28, 0x02	; 2
	int bottom_bound = player_y - 2;
     506:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <player_y>
     50a:	10 e0       	ldi	r17, 0x00	; 0
     50c:	58 01       	movw	r10, r16
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	a8 1a       	sub	r10, r24
     512:	b1 08       	sbc	r11, r1
	int top_bound = player_y + 2;
     514:	0e 5f       	subi	r16, 0xFE	; 254
     516:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// set the current square to be visible and update display
	visible[x][y] = 1;
     518:	87 2c       	mov	r8, r7
     51a:	91 2c       	mov	r9, r1
     51c:	e6 2e       	mov	r14, r22
     51e:	f1 2c       	mov	r15, r1
     520:	f4 01       	movw	r30, r8
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	e0 51       	subi	r30, 0x10	; 16
     530:	fd 4f       	sbci	r31, 0xFD	; 253
     532:	ee 0d       	add	r30, r14
     534:	ff 1d       	adc	r31, r15
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 83       	st	Z, r24
	object_here = get_object_at(x, y);
     53a:	87 2d       	mov	r24, r7
     53c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     540:	58 2e       	mov	r5, r24
	if (field_of_view == 1) {
     542:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <field_of_view>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	f1 f4       	brne	.+60     	; 0x586 <discoverable_dfs+0xb2>
		if (x >= left_bound && x <= right_bound && y >= bottom_bound && y <= top_bound) {
     54a:	8c 14       	cp	r8, r12
     54c:	9d 04       	cpc	r9, r13
     54e:	04 f1       	brlt	.+64     	; 0x590 <discoverable_dfs+0xbc>
     550:	c8 15       	cp	r28, r8
     552:	d9 05       	cpc	r29, r9
     554:	ec f0       	brlt	.+58     	; 0x590 <discoverable_dfs+0xbc>
     556:	ea 14       	cp	r14, r10
     558:	fb 04       	cpc	r15, r11
     55a:	d4 f0       	brlt	.+52     	; 0x590 <discoverable_dfs+0xbc>
     55c:	0e 15       	cp	r16, r14
     55e:	1f 05       	cpc	r17, r15
     560:	bc f0       	brlt	.+46     	; 0x590 <discoverable_dfs+0xbc>
			if (!((x == left_bound || x == right_bound) && (y == bottom_bound || y == top_bound))) {
     562:	c8 14       	cp	r12, r8
     564:	d9 04       	cpc	r13, r9
     566:	19 f0       	breq	.+6      	; 0x56e <discoverable_dfs+0x9a>
     568:	c8 15       	cp	r28, r8
     56a:	d9 05       	cpc	r29, r9
     56c:	31 f4       	brne	.+12     	; 0x57a <discoverable_dfs+0xa6>
     56e:	ae 14       	cp	r10, r14
     570:	bf 04       	cpc	r11, r15
     572:	71 f0       	breq	.+28     	; 0x590 <discoverable_dfs+0xbc>
     574:	0e 15       	cp	r16, r14
     576:	1f 05       	cpc	r17, r15
     578:	59 f0       	breq	.+22     	; 0x590 <discoverable_dfs+0xbc>
				update_square_colour(x, y, object_here);
     57a:	45 2d       	mov	r20, r5
     57c:	66 2d       	mov	r22, r6
     57e:	87 2d       	mov	r24, r7
     580:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
     584:	05 c0       	rjmp	.+10     	; 0x590 <discoverable_dfs+0xbc>
			}
			
		}
	} else {
		update_square_colour(x, y, object_here);
     586:	45 2d       	mov	r20, r5
     588:	66 2d       	mov	r22, r6
     58a:	87 2d       	mov	r24, r7
     58c:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	}
	
	
	// we can continue exploring from this square if it is empty
	if (object_here == EMPTY_SQUARE || object_here == DIAMOND) {
     590:	55 20       	and	r5, r5
     592:	49 f1       	breq	.+82     	; 0x5e6 <discoverable_dfs+0x112>
     594:	85 e0       	ldi	r24, 0x05	; 5
     596:	58 12       	cpse	r5, r24
     598:	2e c0       	rjmp	.+92     	; 0x5f6 <discoverable_dfs+0x122>
     59a:	28 c0       	rjmp	.+80     	; 0x5ec <discoverable_dfs+0x118>
		// consider all 4 adjacent square
		for (int i = 0; i < NUM_DIRECTIONS; i++) {
			x_adj = x + directions[i][0];
     59c:	f8 01       	movw	r30, r16
     59e:	ee 0f       	add	r30, r30
     5a0:	ff 1f       	adc	r31, r31
     5a2:	e5 5b       	subi	r30, 0xB5	; 181
     5a4:	fe 4f       	sbci	r31, 0xFE	; 254
     5a6:	c0 81       	ld	r28, Z
     5a8:	c7 0d       	add	r28, r7
			y_adj = y + directions[i][1];
     5aa:	d1 81       	ldd	r29, Z+1	; 0x01
     5ac:	d6 0d       	add	r29, r6
			// if this square is not visible yet, it should be explored
			if (in_bounds(x_adj, y_adj) && !visible[x_adj][y_adj]) {
     5ae:	6d 2f       	mov	r22, r29
     5b0:	8c 2f       	mov	r24, r28
     5b2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <in_bounds>
     5b6:	88 23       	and	r24, r24
     5b8:	99 f0       	breq	.+38     	; 0x5e0 <discoverable_dfs+0x10c>
     5ba:	ec 2f       	mov	r30, r28
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	e0 51       	subi	r30, 0x10	; 16
     5cc:	fd 4f       	sbci	r31, 0xFD	; 253
     5ce:	ed 0f       	add	r30, r29
     5d0:	f1 1d       	adc	r31, r1
     5d2:	80 81       	ld	r24, Z
     5d4:	81 11       	cpse	r24, r1
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <discoverable_dfs+0x10c>
				// this recursive call implements a depth first search
				// the visible array ensures termination
				discoverable_dfs(x_adj, y_adj);
     5d8:	6d 2f       	mov	r22, r29
     5da:	8c 2f       	mov	r24, r28
     5dc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <discoverable_dfs>
	
	
	// we can continue exploring from this square if it is empty
	if (object_here == EMPTY_SQUARE || object_here == DIAMOND) {
		// consider all 4 adjacent square
		for (int i = 0; i < NUM_DIRECTIONS; i++) {
     5e0:	0f 5f       	subi	r16, 0xFF	; 255
     5e2:	1f 4f       	sbci	r17, 0xFF	; 255
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <discoverable_dfs+0x11c>
     5e6:	00 e0       	ldi	r16, 0x00	; 0
     5e8:	10 e0       	ldi	r17, 0x00	; 0
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <discoverable_dfs+0x11c>
     5ec:	00 e0       	ldi	r16, 0x00	; 0
     5ee:	10 e0       	ldi	r17, 0x00	; 0
     5f0:	08 30       	cpi	r16, 0x08	; 8
     5f2:	11 05       	cpc	r17, r1
     5f4:	9c f2       	brlt	.-90     	; 0x59c <discoverable_dfs+0xc8>
				// the visible array ensures termination
				discoverable_dfs(x_adj, y_adj);
			}
		}
	}
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	7f 90       	pop	r7
     610:	6f 90       	pop	r6
     612:	5f 90       	pop	r5
     614:	08 95       	ret

00000616 <initialise_game_display>:
/*
 * initialise the display of the game, shows the player and the player
 * direction indicator. 
 * executes a visibility search from the player's starting location
 */
void initialise_game_display(void) {
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
	// initialise the display
	initialise_display();
     61e:	0e 94 1f 01 	call	0x23e	; 0x23e <initialise_display>
	// make the entire playing field undiscovered to start
	for (int x = 0; x < WIDTH; x++) {
     622:	00 e0       	ldi	r16, 0x00	; 0
     624:	10 e0       	ldi	r17, 0x00	; 0
     626:	0e c0       	rjmp	.+28     	; 0x644 <initialise_game_display+0x2e>
		for (int y = 0; y < HEIGHT; y++) {
			update_square_colour(x, y, UNDISCOVERED);
     628:	46 e0       	ldi	r20, 0x06	; 6
     62a:	6c 2f       	mov	r22, r28
     62c:	80 2f       	mov	r24, r16
     62e:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
void initialise_game_display(void) {
	// initialise the display
	initialise_display();
	// make the entire playing field undiscovered to start
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
     632:	21 96       	adiw	r28, 0x01	; 1
     634:	02 c0       	rjmp	.+4      	; 0x63a <initialise_game_display+0x24>
     636:	c0 e0       	ldi	r28, 0x00	; 0
     638:	d0 e0       	ldi	r29, 0x00	; 0
     63a:	c8 30       	cpi	r28, 0x08	; 8
     63c:	d1 05       	cpc	r29, r1
     63e:	a4 f3       	brlt	.-24     	; 0x628 <initialise_game_display+0x12>
 */
void initialise_game_display(void) {
	// initialise the display
	initialise_display();
	// make the entire playing field undiscovered to start
	for (int x = 0; x < WIDTH; x++) {
     640:	0f 5f       	subi	r16, 0xFF	; 255
     642:	1f 4f       	sbci	r17, 0xFF	; 255
     644:	00 31       	cpi	r16, 0x10	; 16
     646:	11 05       	cpc	r17, r1
     648:	b4 f3       	brlt	.-20     	; 0x636 <initialise_game_display+0x20>
		for (int y = 0; y < HEIGHT; y++) {
			update_square_colour(x, y, UNDISCOVERED);
		}
	}
	// now explore visibility from the starting location
	discoverable_dfs(player_x, player_y);
     64a:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <player_y>
     64e:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <player_x>
     652:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <discoverable_dfs>
	// make the player and facing square visible
	update_square_colour(player_x, player_y, PLAYER);
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <player_y>
     65c:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <player_x>
     660:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	update_square_colour(facing_x, facing_y, FACING);
     664:	42 e0       	ldi	r20, 0x02	; 2
     666:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     66a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     66e:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <initialise_game>:

void initialise_game(void) {
	// to initialise the game, we need to initialise the state (variables)
	// and the display
	initialise_game_state();
     67c:	0e 94 8c 01 	call	0x318	; 0x318 <initialise_game_state>
	initialise_game_display();
     680:	0e 94 0b 03 	call	0x616	; 0x616 <initialise_game_display>
     684:	08 95       	ret

00000686 <inspect_block>:
		}
	}
}

void inspect_block(void) {
	int8_t inspected = get_object_at(facing_x, facing_y);
     686:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     68a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     68e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
	if (inspected == BREAKABLE || inspected == DIS_BREAK) {
     692:	83 30       	cpi	r24, 0x03	; 3
     694:	11 f0       	breq	.+4      	; 0x69a <inspect_block+0x14>
     696:	87 30       	cpi	r24, 0x07	; 7
     698:	39 f5       	brne	.+78     	; 0x6e8 <inspect_block+0x62>
		int8_t block;
		if (cheats) {
     69a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <cheats>
     69e:	88 23       	and	r24, r24
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <inspect_block+0x20>
			block = EMPTY_SQUARE;
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <inspect_block+0x22>
		} else {
			block = DIS_BREAK;
     6a6:	97 e0       	ldi	r25, 0x07	; 7
		}
		playing_field[facing_x][facing_y] = block;
     6a8:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     6ac:	e8 2f       	mov	r30, r24
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	ee 0f       	add	r30, r30
     6ba:	ff 1f       	adc	r31, r31
     6bc:	ee 0f       	add	r30, r30
     6be:	ff 1f       	adc	r31, r31
     6c0:	e3 59       	subi	r30, 0x93	; 147
     6c2:	fd 4f       	sbci	r31, 0xFD	; 253
     6c4:	e6 0f       	add	r30, r22
     6c6:	f1 1d       	adc	r31, r1
     6c8:	90 83       	st	Z, r25
		update_square_colour(facing_x, facing_y, get_object_at(facing_x, facing_y));
     6ca:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     6ce:	48 2f       	mov	r20, r24
     6d0:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     6d4:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     6d8:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
		discoverable_dfs(facing_x, facing_y);
     6dc:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     6e0:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     6e4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <discoverable_dfs>
     6e8:	08 95       	ret

000006ea <toggle_cheats>:
	}
}

void toggle_cheats(void) {
	cheats = 1 - cheats;
     6ea:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <cheats>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	89 1b       	sub	r24, r25
     6f2:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <cheats>
	
	// update console
	move_terminal_cursor(53,3);
     6f6:	63 e0       	ldi	r22, 0x03	; 3
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	85 e3       	ldi	r24, 0x35	; 53
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	
	if (cheats == 1) {
     702:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <cheats>
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	49 f4       	brne	.+18     	; 0x71c <toggle_cheats+0x32>
		printf("on ");
     70a:	88 e2       	ldi	r24, 0x28	; 40
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <printf>
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	08 c0       	rjmp	.+16     	; 0x72c <toggle_cheats+0x42>
	} else {
		printf("off");
     71c:	8c e2       	ldi	r24, 0x2C	; 44
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <printf>
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(1,1);
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
     738:	08 95       	ret

0000073a <toggle_pause>:
}

void toggle_pause(void) {
	paused ^= 1;
     73a:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <paused>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	89 27       	eor	r24, r25
     742:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <paused>
	
	move_terminal_cursor(45, 4);
     746:	64 e0       	ldi	r22, 0x04	; 4
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	8d e2       	ldi	r24, 0x2D	; 45
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	
	if (paused == 1) {
     752:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <paused>
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	49 f4       	brne	.+18     	; 0x76c <toggle_pause+0x32>
		printf("Paused");
     75a:	80 e3       	ldi	r24, 0x30	; 48
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <printf>
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	08 c0       	rjmp	.+16     	; 0x77c <toggle_pause+0x42>
	} else {
		printf("      ");
     76c:	87 e3       	ldi	r24, 0x37	; 55
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <printf>
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
	}
	
	move_terminal_cursor(1,1);
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
     788:	08 95       	ret

0000078a <get_paused>:
}

uint8_t get_paused(void) {
	return paused;
}
     78a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <paused>
     78e:	08 95       	ret

00000790 <render_close>:
		
		render_close();
	}
}

void render_close(void) {
     790:	6f 92       	push	r6
     792:	7f 92       	push	r7
     794:	8f 92       	push	r8
     796:	9f 92       	push	r9
     798:	af 92       	push	r10
     79a:	bf 92       	push	r11
     79c:	cf 92       	push	r12
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
	int left_bound = player_x - 2;
     7ac:	e0 90 72 03 	lds	r14, 0x0372	; 0x800372 <player_x>
     7b0:	f1 2c       	mov	r15, r1
     7b2:	67 01       	movw	r12, r14
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	c8 1a       	sub	r12, r24
     7b8:	d1 08       	sbc	r13, r1
	int right_bound = player_x + 2;
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	e8 0e       	add	r14, r24
     7be:	f1 1c       	adc	r15, r1
	int bottom_bound = player_y - 2;
     7c0:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <player_y>
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	58 01       	movw	r10, r16
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	a8 1a       	sub	r10, r24
     7cc:	b1 08       	sbc	r11, r1
	int top_bound = player_y + 2;
     7ce:	0e 5f       	subi	r16, 0xFE	; 254
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for (int x = left_bound; x <= right_bound; x++) {
     7d2:	e6 01       	movw	r28, r12
     7d4:	34 c0       	rjmp	.+104    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		for (int y = bottom_bound; y <= top_bound; y++) {
			if (in_bounds(x, y)) {
     7d6:	68 2c       	mov	r6, r8
     7d8:	7c 2e       	mov	r7, r28
     7da:	68 2d       	mov	r22, r8
     7dc:	8c 2f       	mov	r24, r28
     7de:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <in_bounds>
     7e2:	88 23       	and	r24, r24
     7e4:	19 f1       	breq	.+70     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
				if (!((x == left_bound || x == right_bound) && (y == bottom_bound || y == top_bound))) {	// if not corners
     7e6:	cc 15       	cp	r28, r12
     7e8:	dd 05       	cpc	r29, r13
     7ea:	19 f0       	breq	.+6      	; 0x7f2 <render_close+0x62>
     7ec:	ce 15       	cp	r28, r14
     7ee:	df 05       	cpc	r29, r15
     7f0:	31 f4       	brne	.+12     	; 0x7fe <render_close+0x6e>
     7f2:	8a 14       	cp	r8, r10
     7f4:	9b 04       	cpc	r9, r11
     7f6:	d1 f0       	breq	.+52     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     7f8:	80 16       	cp	r8, r16
     7fa:	91 06       	cpc	r9, r17
     7fc:	b9 f0       	breq	.+46     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
					if (visible[x][y] == 1) {
     7fe:	fe 01       	movw	r30, r28
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	e0 51       	subi	r30, 0x10	; 16
     80e:	fd 4f       	sbci	r31, 0xFD	; 253
     810:	e8 0d       	add	r30, r8
     812:	f9 1d       	adc	r31, r9
     814:	80 81       	ld	r24, Z
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	49 f4       	brne	.+18     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
						update_square_colour(x, y, get_object_at(x, y));
     81a:	66 2d       	mov	r22, r6
     81c:	87 2d       	mov	r24, r7
     81e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     822:	48 2f       	mov	r20, r24
     824:	66 2d       	mov	r22, r6
     826:	87 2d       	mov	r24, r7
     828:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	int right_bound = player_x + 2;
	int bottom_bound = player_y - 2;
	int top_bound = player_y + 2;
	
	for (int x = left_bound; x <= right_bound; x++) {
		for (int y = bottom_bound; y <= top_bound; y++) {
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	88 1a       	sub	r8, r24
     830:	98 0a       	sbc	r9, r24
     832:	01 c0       	rjmp	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     834:	45 01       	movw	r8, r10
     836:	08 15       	cp	r16, r8
     838:	19 05       	cpc	r17, r9
     83a:	6c f6       	brge	.-102    	; 0x7d6 <render_close+0x46>
	int left_bound = player_x - 2;
	int right_bound = player_x + 2;
	int bottom_bound = player_y - 2;
	int top_bound = player_y + 2;
	
	for (int x = left_bound; x <= right_bound; x++) {
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	ec 16       	cp	r14, r28
     840:	fd 06       	cpc	r15, r29
     842:	c4 f7       	brge	.-16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
					}
				}
			}
		}
	}
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	df 90       	pop	r13
     852:	cf 90       	pop	r12
     854:	bf 90       	pop	r11
     856:	af 90       	pop	r10
     858:	9f 90       	pop	r9
     85a:	8f 90       	pop	r8
     85c:	7f 90       	pop	r7
     85e:	6f 90       	pop	r6
     860:	08 95       	ret

00000862 <toggle_field_of_view>:

uint8_t get_paused(void) {
	return paused;
}

void toggle_field_of_view(void) {
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
	field_of_view ^= 1;
     866:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <field_of_view>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	89 27       	eor	r24, r25
     86e:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <field_of_view>
	
	if (field_of_view == 1) {
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	71 f0       	breq	.+28     	; 0x892 <toggle_field_of_view+0x30>
     876:	d0 e0       	ldi	r29, 0x00	; 0
     878:	30 c0       	rjmp	.+96     	; 0x8da <toggle_field_of_view+0x78>
		// set all cells to be hidden
		for (uint8_t x = 0; x < WIDTH; x++) {
			for (uint8_t y = 0; y < HEIGHT; y++) {
				update_square_colour(x, y, UNDISCOVERED);
     87a:	46 e0       	ldi	r20, 0x06	; 6
     87c:	6c 2f       	mov	r22, r28
     87e:	8d 2f       	mov	r24, r29
     880:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	field_of_view ^= 1;
	
	if (field_of_view == 1) {
		// set all cells to be hidden
		for (uint8_t x = 0; x < WIDTH; x++) {
			for (uint8_t y = 0; y < HEIGHT; y++) {
     884:	cf 5f       	subi	r28, 0xFF	; 255
     886:	01 c0       	rjmp	.+2      	; 0x88a <toggle_field_of_view+0x28>
     888:	c0 e0       	ldi	r28, 0x00	; 0
     88a:	c8 30       	cpi	r28, 0x08	; 8
     88c:	b0 f3       	brcs	.-20     	; 0x87a <toggle_field_of_view+0x18>
void toggle_field_of_view(void) {
	field_of_view ^= 1;
	
	if (field_of_view == 1) {
		// set all cells to be hidden
		for (uint8_t x = 0; x < WIDTH; x++) {
     88e:	df 5f       	subi	r29, 0xFF	; 255
     890:	01 c0       	rjmp	.+2      	; 0x894 <toggle_field_of_view+0x32>
     892:	d0 e0       	ldi	r29, 0x00	; 0
     894:	d0 31       	cpi	r29, 0x10	; 16
     896:	c0 f3       	brcs	.-16     	; 0x888 <toggle_field_of_view+0x26>
			for (uint8_t y = 0; y < HEIGHT; y++) {
				update_square_colour(x, y, UNDISCOVERED);
			}
		}
		
		render_close();
     898:	0e 94 c8 03 	call	0x790	; 0x790 <render_close>
     89c:	20 c0       	rjmp	.+64     	; 0x8de <toggle_field_of_view+0x7c>
	} else {
		for (uint8_t x = 0; x < WIDTH; x++) {
			for (uint8_t y = 0; y < HEIGHT; y++) {
				if (visible[x][y] == 1) {
     89e:	ed 2f       	mov	r30, r29
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	e0 51       	subi	r30, 0x10	; 16
     8b0:	fd 4f       	sbci	r31, 0xFD	; 253
     8b2:	ec 0f       	add	r30, r28
     8b4:	f1 1d       	adc	r31, r1
     8b6:	80 81       	ld	r24, Z
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	49 f4       	brne	.+18     	; 0x8ce <toggle_field_of_view+0x6c>
					update_square_colour(x, y, get_object_at(x, y));
     8bc:	6c 2f       	mov	r22, r28
     8be:	8d 2f       	mov	r24, r29
     8c0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     8c4:	48 2f       	mov	r20, r24
     8c6:	6c 2f       	mov	r22, r28
     8c8:	8d 2f       	mov	r24, r29
     8ca:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
		}
		
		render_close();
	} else {
		for (uint8_t x = 0; x < WIDTH; x++) {
			for (uint8_t y = 0; y < HEIGHT; y++) {
     8ce:	cf 5f       	subi	r28, 0xFF	; 255
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <toggle_field_of_view+0x72>
     8d2:	c0 e0       	ldi	r28, 0x00	; 0
     8d4:	c8 30       	cpi	r28, 0x08	; 8
     8d6:	18 f3       	brcs	.-58     	; 0x89e <toggle_field_of_view+0x3c>
			}
		}
		
		render_close();
	} else {
		for (uint8_t x = 0; x < WIDTH; x++) {
     8d8:	df 5f       	subi	r29, 0xFF	; 255
     8da:	d0 31       	cpi	r29, 0x10	; 16
     8dc:	d0 f3       	brcs	.-12     	; 0x8d2 <toggle_field_of_view+0x70>
			}
		}
	}
	
	// make the player and facing square visible
	update_square_colour(player_x, player_y, PLAYER);
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <player_y>
     8e4:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <player_x>
     8e8:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	update_square_colour(facing_x, facing_y, FACING);	// not sure if i need these. safety
     8ec:	42 e0       	ldi	r20, 0x02	; 2
     8ee:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     8f2:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     8f6:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <fov_update>:

void fov_update(void) {
     900:	6f 92       	push	r6
     902:	7f 92       	push	r7
     904:	8f 92       	push	r8
     906:	9f 92       	push	r9
     908:	af 92       	push	r10
     90a:	bf 92       	push	r11
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
	if (field_of_view == 1) {
     91c:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <field_of_view>
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	09 f0       	breq	.+2      	; 0x926 <fov_update+0x26>
     924:	4a c0       	rjmp	.+148    	; 0x9ba <fov_update+0xba>
		// set all cells to be hidden
		int left_bound = player_x - 3;
     926:	e0 90 72 03 	lds	r14, 0x0372	; 0x800372 <player_x>
     92a:	f1 2c       	mov	r15, r1
     92c:	67 01       	movw	r12, r14
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	c8 1a       	sub	r12, r24
     932:	d1 08       	sbc	r13, r1
		int right_bound = player_x + 3;
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	e8 0e       	add	r14, r24
     938:	f1 1c       	adc	r15, r1
		int bottom_bound = player_y - 3;
     93a:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <player_y>
     93e:	10 e0       	ldi	r17, 0x00	; 0
     940:	58 01       	movw	r10, r16
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	a8 1a       	sub	r10, r24
     946:	b1 08       	sbc	r11, r1
		int top_bound = player_y + 3;
     948:	0d 5f       	subi	r16, 0xFD	; 253
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (int x = left_bound; x <= right_bound; x++) {
     94c:	e6 01       	movw	r28, r12
     94e:	30 c0       	rjmp	.+96     	; 0x9b0 <fov_update+0xb0>
			for (int y = bottom_bound; y <= top_bound; y++) {
				if (in_bounds(x, y)) {
     950:	68 2c       	mov	r6, r8
     952:	7c 2e       	mov	r7, r28
     954:	68 2d       	mov	r22, r8
     956:	8c 2f       	mov	r24, r28
     958:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <in_bounds>
     95c:	88 23       	and	r24, r24
     95e:	f9 f0       	breq	.+62     	; 0x99e <fov_update+0x9e>
					if (!((x == left_bound || x == right_bound) && (y == bottom_bound || y == top_bound))) {	// if not corners
     960:	cc 15       	cp	r28, r12
     962:	dd 05       	cpc	r29, r13
     964:	19 f0       	breq	.+6      	; 0x96c <fov_update+0x6c>
     966:	ce 15       	cp	r28, r14
     968:	df 05       	cpc	r29, r15
     96a:	31 f4       	brne	.+12     	; 0x978 <fov_update+0x78>
     96c:	8a 14       	cp	r8, r10
     96e:	9b 04       	cpc	r9, r11
     970:	b1 f0       	breq	.+44     	; 0x99e <fov_update+0x9e>
     972:	80 16       	cp	r8, r16
     974:	91 06       	cpc	r9, r17
     976:	99 f0       	breq	.+38     	; 0x99e <fov_update+0x9e>
						if (visible[x][y] == 1) {
     978:	fe 01       	movw	r30, r28
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	e0 51       	subi	r30, 0x10	; 16
     988:	fd 4f       	sbci	r31, 0xFD	; 253
     98a:	e8 0d       	add	r30, r8
     98c:	f9 1d       	adc	r31, r9
     98e:	80 81       	ld	r24, Z
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	29 f4       	brne	.+10     	; 0x99e <fov_update+0x9e>
							update_square_colour(x, y, UNDISCOVERED);
     994:	46 e0       	ldi	r20, 0x06	; 6
     996:	66 2d       	mov	r22, r6
     998:	87 2d       	mov	r24, r7
     99a:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
		int right_bound = player_x + 3;
		int bottom_bound = player_y - 3;
		int top_bound = player_y + 3;
		
		for (int x = left_bound; x <= right_bound; x++) {
			for (int y = bottom_bound; y <= top_bound; y++) {
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	88 1a       	sub	r8, r24
     9a2:	98 0a       	sbc	r9, r24
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <fov_update+0xa8>
     9a6:	45 01       	movw	r8, r10
     9a8:	08 15       	cp	r16, r8
     9aa:	19 05       	cpc	r17, r9
     9ac:	8c f6       	brge	.-94     	; 0x950 <fov_update+0x50>
		int left_bound = player_x - 3;
		int right_bound = player_x + 3;
		int bottom_bound = player_y - 3;
		int top_bound = player_y + 3;
		
		for (int x = left_bound; x <= right_bound; x++) {
     9ae:	21 96       	adiw	r28, 0x01	; 1
     9b0:	ec 16       	cp	r14, r28
     9b2:	fd 06       	cpc	r15, r29
     9b4:	c4 f7       	brge	.-16     	; 0x9a6 <fov_update+0xa6>
					}
				}
			}
		}
		
		render_close();
     9b6:	0e 94 c8 03 	call	0x790	; 0x790 <render_close>
	}
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	7f 90       	pop	r7
     9d4:	6f 90       	pop	r6
     9d6:	08 95       	ret

000009d8 <move_player>:
	return steps;
}

// check the header file game.h for a description of what this function should do
// it contains a few extra hints
void move_player(uint8_t dx, uint8_t dy) {
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	d8 2f       	mov	r29, r24
     9e4:	c6 2f       	mov	r28, r22
	update_square_colour(player_x, player_y, get_object_at(player_x, player_y));		// set current square black
     9e6:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <player_y>
     9ea:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <player_x>
     9ee:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     9f2:	48 2f       	mov	r20, r24
     9f4:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <player_y>
     9f8:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <player_x>
     9fc:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	
	//2
	uint8_t new_player_x = player_x + dx;
     a00:	10 91 72 03 	lds	r17, 0x0372	; 0x800372 <player_x>
     a04:	fd 2e       	mov	r15, r29
     a06:	f1 0e       	add	r15, r17
	uint8_t new_player_y = player_y + dy;
     a08:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <player_y>
     a0c:	0c 0f       	add	r16, r28
	// check object at new position
	uint8_t object_new = get_object_at(new_player_x, new_player_y);
     a0e:	60 2f       	mov	r22, r16
     a10:	8f 2d       	mov	r24, r15
     a12:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     a16:	18 2f       	mov	r17, r24
	
	if (object_new == NEXT_LEVEL) {
     a18:	89 30       	cpi	r24, 0x09	; 9
     a1a:	11 f4       	brne	.+4      	; 0xa20 <move_player+0x48>
		new_game();
     a1c:	0e 94 be 07 	call	0xf7c	; 0xf7c <new_game>
	}
	// if can move to position (i.e. not a wall)
	
	if (object_new == EMPTY_SQUARE || object_new == FACING || object_new == DIAMOND) {
     a20:	11 23       	and	r17, r17
     a22:	29 f0       	breq	.+10     	; 0xa2e <move_player+0x56>
     a24:	12 30       	cpi	r17, 0x02	; 2
     a26:	19 f0       	breq	.+6      	; 0xa2e <move_player+0x56>
     a28:	15 30       	cpi	r17, 0x05	; 5
     a2a:	09 f0       	breq	.+2      	; 0xa2e <move_player+0x56>
     a2c:	44 c0       	rjmp	.+136    	; 0xab6 <move_player+0xde>
		// update position of player
		player_x = new_player_x;
     a2e:	f0 92 72 03 	sts	0x0372, r15	; 0x800372 <player_x>
		player_y = new_player_y;
     a32:	00 93 6b 02 	sts	0x026B, r16	; 0x80026b <player_y>
		
		if (object_new == DIAMOND) {
     a36:	15 30       	cpi	r17, 0x05	; 5
     a38:	b9 f5       	brne	.+110    	; 0xaa8 <move_player+0xd0>
			playing_field[player_x][player_y] = EMPTY_SQUARE;
     a3a:	ef 2d       	mov	r30, r15
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	ee 0f       	add	r30, r30
     a44:	ff 1f       	adc	r31, r31
     a46:	ee 0f       	add	r30, r30
     a48:	ff 1f       	adc	r31, r31
     a4a:	e3 59       	subi	r30, 0x93	; 147
     a4c:	fd 4f       	sbci	r31, 0xFD	; 253
     a4e:	e0 0f       	add	r30, r16
     a50:	f1 1d       	adc	r31, r1
     a52:	10 82       	st	Z, r1
			update_square_colour(facing_x, facing_y, get_object_at(player_x, player_y));
     a54:	60 2f       	mov	r22, r16
     a56:	8f 2d       	mov	r24, r15
     a58:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     a5c:	48 2f       	mov	r20, r24
     a5e:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     a62:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     a66:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
			diamonds += 1;
     a6a:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <diamonds>
     a6e:	8f 5f       	subi	r24, 0xFF	; 255
     a70:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <diamonds>
			
			// Update console
			move_terminal_cursor(65,2);
     a74:	62 e0       	ldi	r22, 0x02	; 2
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e4       	ldi	r24, 0x41	; 65
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
			printf("%d", diamonds);
     a80:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <diamonds>
     a84:	1f 92       	push	r1
     a86:	8f 93       	push	r24
     a88:	8e e3       	ldi	r24, 0x3E	; 62
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <printf>
			move_terminal_cursor(1,1);
     a94:	61 e0       	ldi	r22, 0x01	; 1
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
		}
		
		if (steps < 99) {
     aa8:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <steps>
     aac:	83 36       	cpi	r24, 0x63	; 99
     aae:	18 f4       	brcc	.+6      	; 0xab6 <move_player+0xde>
			steps += 1;
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <steps>
		}
	}
	
	// FOV
	fov_update();
     ab6:	0e 94 80 04 	call	0x900	; 0x900 <fov_update>
	
	// update player pixels
	update_square_colour(facing_x, facing_y, get_object_at(facing_x, facing_y));
     aba:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     abe:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     ac2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     ac6:	48 2f       	mov	r20, r24
     ac8:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <facing_y>
     acc:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <facing_x>
     ad0:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	update_square_colour(player_x, player_y, PLAYER);
     ad4:	41 e0       	ldi	r20, 0x01	; 1
     ad6:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <player_y>
     ada:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <player_x>
     ade:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	
	// update facing
	facing_x = player_x + dx;
     ae2:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <player_x>
     ae6:	d8 0f       	add	r29, r24
     ae8:	d0 93 76 03 	sts	0x0376, r29	; 0x800376 <facing_x>
	facing_y = player_y + dy;
     aec:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <player_y>
     af0:	c8 0f       	add	r28, r24
     af2:	c0 93 73 03 	sts	0x0373, r28	; 0x800373 <facing_y>
	
	flash_facing();
     af6:	0e 94 31 02 	call	0x462	; 0x462 <flash_facing>
	//    (and replace it with whatever else is at that location)
	// 2: determine if a move is possible
	// 3: if the player can move, update the positional knowledge of the player, 
	//    this will include variables player_x and player_y
	// 4: display the player at the new location
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	08 95       	ret

00000b06 <distance_to_diamond>:
			}
		}
	}
}

uint8_t distance_to_diamond(void) {
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
	uint8_t min_distance = 99;
	uint8_t man_dis = 0;
	for (int x = 0; x < WIDTH; x++) {
     b10:	00 e0       	ldi	r16, 0x00	; 0
     b12:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
}

uint8_t distance_to_diamond(void) {
	uint8_t min_distance = 99;
     b14:	0f 2e       	mov	r0, r31
     b16:	f3 e6       	ldi	r31, 0x63	; 99
     b18:	ff 2e       	mov	r15, r31
     b1a:	f0 2d       	mov	r31, r0
	uint8_t man_dis = 0;
	for (int x = 0; x < WIDTH; x++) {
     b1c:	2a c0       	rjmp	.+84     	; 0xb72 <distance_to_diamond+0x6c>
		for (int y = 0; y < HEIGHT; y++) {
			uint8_t object = get_object_at(x, y);
     b1e:	6c 2f       	mov	r22, r28
     b20:	80 2f       	mov	r24, r16
     b22:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
			if (object == DIAMOND) {
     b26:	85 30       	cpi	r24, 0x05	; 5
     b28:	d9 f4       	brne	.+54     	; 0xb60 <distance_to_diamond+0x5a>
				man_dis = abs(player_x - x) + abs(player_y - y);
     b2a:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <player_x>
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	80 1b       	sub	r24, r16
     b32:	91 0b       	sbc	r25, r17
     b34:	9c 01       	movw	r18, r24
     b36:	22 f4       	brpl	.+8      	; 0xb40 <distance_to_diamond+0x3a>
     b38:	22 27       	eor	r18, r18
     b3a:	33 27       	eor	r19, r19
     b3c:	28 1b       	sub	r18, r24
     b3e:	39 0b       	sbc	r19, r25
     b40:	42 2f       	mov	r20, r18
     b42:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <player_y>
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	8c 1b       	sub	r24, r28
     b4a:	9d 0b       	sbc	r25, r29
     b4c:	9c 01       	movw	r18, r24
     b4e:	22 f4       	brpl	.+8      	; 0xb58 <distance_to_diamond+0x52>
     b50:	22 27       	eor	r18, r18
     b52:	33 27       	eor	r19, r19
     b54:	28 1b       	sub	r18, r24
     b56:	39 0b       	sbc	r19, r25
     b58:	24 0f       	add	r18, r20
				
				if (man_dis < min_distance) {
     b5a:	2f 15       	cp	r18, r15
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <distance_to_diamond+0x5a>
					min_distance = man_dis;
     b5e:	f2 2e       	mov	r15, r18

uint8_t distance_to_diamond(void) {
	uint8_t min_distance = 99;
	uint8_t man_dis = 0;
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
     b60:	21 96       	adiw	r28, 0x01	; 1
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <distance_to_diamond+0x62>
     b64:	c0 e0       	ldi	r28, 0x00	; 0
     b66:	d0 e0       	ldi	r29, 0x00	; 0
     b68:	c8 30       	cpi	r28, 0x08	; 8
     b6a:	d1 05       	cpc	r29, r1
     b6c:	c4 f2       	brlt	.-80     	; 0xb1e <distance_to_diamond+0x18>
}

uint8_t distance_to_diamond(void) {
	uint8_t min_distance = 99;
	uint8_t man_dis = 0;
	for (int x = 0; x < WIDTH; x++) {
     b6e:	0f 5f       	subi	r16, 0xFF	; 255
     b70:	1f 4f       	sbci	r17, 0xFF	; 255
     b72:	00 31       	cpi	r16, 0x10	; 16
     b74:	11 05       	cpc	r17, r1
     b76:	b4 f3       	brlt	.-20     	; 0xb64 <distance_to_diamond+0x5e>
			}
		}
	}
	
	return min_distance;
}
     b78:	8f 2d       	mov	r24, r15
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	08 95       	ret

00000b86 <place_bomb>:

void place_bomb(void) {
	bomb_x = player_x;
     b86:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <player_x>
     b8a:	e0 93 75 03 	sts	0x0375, r30	; 0x800375 <bomb_x>
	bomb_y = player_y;
     b8e:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <player_y>
     b92:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <bomb_y>
		
	playing_field[bomb_x][bomb_y] = BOMB;
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	e3 59       	subi	r30, 0x93	; 147
     ba6:	fd 4f       	sbci	r31, 0xFD	; 253
     ba8:	e8 0f       	add	r30, r24
     baa:	f1 1d       	adc	r31, r1
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	80 83       	st	Z, r24
	if (!(player_x == bomb_x && player_y == bomb_y)) {
		update_square_colour(bomb_x, bomb_y, get_object_at(bomb_x, bomb_y));
	}
	
	bomb_graphics_enabled = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <bomb_graphics_enabled>
     bb6:	08 95       	ret

00000bb8 <detonate_bomb>:
}

void detonate_bomb(void) {
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	2a 97       	sbiw	r28, 0x0a	; 10
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
	uint8_t new_x;
	uint8_t new_y;
	
	uint8_t moves[5][2] = {{0,0}, {0,-1}, {-1,0}, {1, 0}, {0, 1}};
     bce:	8a e0       	ldi	r24, 0x0A	; 10
     bd0:	ee e0       	ldi	r30, 0x0E	; 14
     bd2:	f1 e0       	ldi	r31, 0x01	; 1
     bd4:	de 01       	movw	r26, r28
     bd6:	11 96       	adiw	r26, 0x01	; 1
     bd8:	01 90       	ld	r0, Z+
     bda:	0d 92       	st	X+, r0
     bdc:	8a 95       	dec	r24
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <detonate_bomb+0x20>
	
	uint8_t new_object;
	
	for (uint8_t i = 0; i < 5; i++) {
     be0:	10 e0       	ldi	r17, 0x00	; 0
     be2:	47 c0       	rjmp	.+142    	; 0xc72 <detonate_bomb+0xba>
		new_x = bomb_x + moves[i][0];
     be4:	e1 2f       	mov	r30, r17
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	8c 0f       	add	r24, r28
     bf2:	9d 1f       	adc	r25, r29
     bf4:	e8 0f       	add	r30, r24
     bf6:	f9 1f       	adc	r31, r25
     bf8:	90 81       	ld	r25, Z
     bfa:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <bomb_x>
     bfe:	89 0f       	add	r24, r25
		new_y = bomb_y + moves[i][1];
     c00:	61 81       	ldd	r22, Z+1	; 0x01
     c02:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <bomb_y>
     c06:	69 0f       	add	r22, r25
		new_object = playing_field[new_x][new_y];
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	46 2f       	mov	r20, r22
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	f9 01       	movw	r30, r18
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	ee 0f       	add	r30, r30
     c18:	ff 1f       	adc	r31, r31
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	e3 59       	subi	r30, 0x93	; 147
     c20:	fd 4f       	sbci	r31, 0xFD	; 253
     c22:	e4 0f       	add	r30, r20
     c24:	f5 1f       	adc	r31, r21
     c26:	90 81       	ld	r25, Z
		if (new_x == player_x && new_y == player_y) {	// handle player next to bomb
     c28:	70 91 72 03 	lds	r23, 0x0372	; 0x800372 <player_x>
     c2c:	87 13       	cpse	r24, r23
     c2e:	0c c0       	rjmp	.+24     	; 0xc48 <detonate_bomb+0x90>
     c30:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <player_y>
     c34:	67 13       	cpse	r22, r23
     c36:	08 c0       	rjmp	.+16     	; 0xc48 <detonate_bomb+0x90>
			game_over = 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <game_over>
			handle_game_over();
     c3e:	0e 94 8f 0a 	call	0x151e	; 0x151e <handle_game_over>
			new_game();
     c42:	0e 94 be 07 	call	0xf7c	; 0xf7c <new_game>
     c46:	14 c0       	rjmp	.+40     	; 0xc70 <detonate_bomb+0xb8>
		} else if (new_object == BREAKABLE || new_object == BOMB || new_object == DIS_BREAK) {
     c48:	93 30       	cpi	r25, 0x03	; 3
     c4a:	21 f0       	breq	.+8      	; 0xc54 <detonate_bomb+0x9c>
     c4c:	98 30       	cpi	r25, 0x08	; 8
     c4e:	11 f0       	breq	.+4      	; 0xc54 <detonate_bomb+0x9c>
     c50:	97 30       	cpi	r25, 0x07	; 7
     c52:	71 f4       	brne	.+28     	; 0xc70 <detonate_bomb+0xb8>
			playing_field[new_x][new_y] = EMPTY_SQUARE;
     c54:	22 0f       	add	r18, r18
     c56:	33 1f       	adc	r19, r19
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	23 59       	subi	r18, 0x93	; 147
     c62:	3d 4f       	sbci	r19, 0xFD	; 253
     c64:	f9 01       	movw	r30, r18
     c66:	e4 0f       	add	r30, r20
     c68:	f5 1f       	adc	r31, r21
     c6a:	10 82       	st	Z, r1
			discoverable_dfs(new_x, new_y);
     c6c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <discoverable_dfs>
	
	uint8_t moves[5][2] = {{0,0}, {0,-1}, {-1,0}, {1, 0}, {0, 1}};
	
	uint8_t new_object;
	
	for (uint8_t i = 0; i < 5; i++) {
     c70:	1f 5f       	subi	r17, 0xFF	; 255
     c72:	15 30       	cpi	r17, 0x05	; 5
     c74:	08 f4       	brcc	.+2      	; 0xc78 <detonate_bomb+0xc0>
     c76:	b6 cf       	rjmp	.-148    	; 0xbe4 <detonate_bomb+0x2c>
			playing_field[new_x][new_y] = EMPTY_SQUARE;
			discoverable_dfs(new_x, new_y);
		}
	}
	
	update_square_colour(bomb_x, bomb_y, get_object_at(bomb_x, bomb_y));
     c78:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <bomb_y>
     c7c:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <bomb_x>
     c80:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     c84:	48 2f       	mov	r20, r24
     c86:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <bomb_y>
     c8a:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <bomb_x>
     c8e:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	
	
}
     c92:	2a 96       	adiw	r28, 0x0a	; 10
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	08 95       	ret

00000ca6 <flash_bomb>:

void flash_bomb(void) {
	uint8_t bomb;
	if (bomb_x == 17 && bomb_y == 17) {
     ca6:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <bomb_x>
     caa:	81 31       	cpi	r24, 0x11	; 17
     cac:	21 f4       	brne	.+8      	; 0xcb6 <flash_bomb+0x10>
     cae:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <bomb_y>
     cb2:	91 31       	cpi	r25, 0x11	; 17
     cb4:	79 f0       	breq	.+30     	; 0xcd4 <flash_bomb+0x2e>
		return;
	}
	
	bomb_view ^= 1;
     cb6:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <bomb_view>
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	92 27       	eor	r25, r18
     cbe:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <bomb_view>
	
	if (bomb_view == 0) {
     cc2:	91 11       	cpse	r25, r1
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <flash_bomb+0x24>
		bomb = EMPTY_SQUARE;
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <flash_bomb+0x26>
	} else {
		bomb = BOMB;
     cca:	48 e0       	ldi	r20, 0x08	; 8
	}
	
	update_square_colour(bomb_x, bomb_y, bomb);
     ccc:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <bomb_y>
     cd0:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
     cd4:	08 95       	ret

00000cd6 <bomb_graphics>:
}


void bomb_graphics(void) {
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	2a 97       	sbiw	r28, 0x0a	; 10
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
	uint8_t new_x;
	uint8_t new_y;
	uint8_t moves[5][2] = {{0,0}, {0,-1}, {-1,0}, {1, 0}, {0, 1}};
     cf0:	8a e0       	ldi	r24, 0x0A	; 10
     cf2:	ee e0       	ldi	r30, 0x0E	; 14
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	de 01       	movw	r26, r28
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	01 90       	ld	r0, Z+
     cfc:	0d 92       	st	X+, r0
     cfe:	8a 95       	dec	r24
     d00:	e1 f7       	brne	.-8      	; 0xcfa <bomb_graphics+0x24>
	
	if (bomb_graphics_enabled == 0) {
     d02:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <bomb_graphics_enabled>
     d06:	88 23       	and	r24, r24
     d08:	f9 f0       	breq	.+62     	; 0xd48 <bomb_graphics+0x72>
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	3d c0       	rjmp	.+122    	; 0xd88 <bomb_graphics+0xb2>
		for (uint8_t i = 0; i < 5; i++) {
			new_x = bomb_x + moves[i][0];
     d0e:	ef 2d       	mov	r30, r15
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	8c 0f       	add	r24, r28
     d1c:	9d 1f       	adc	r25, r29
     d1e:	e8 0f       	add	r30, r24
     d20:	f9 1f       	adc	r31, r25
     d22:	10 81       	ld	r17, Z
     d24:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <bomb_x>
     d28:	18 0f       	add	r17, r24
			new_y = bomb_y + moves[i][1];
     d2a:	01 81       	ldd	r16, Z+1	; 0x01
     d2c:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <bomb_y>
     d30:	08 0f       	add	r16, r24
			
			update_square_colour(new_x, new_y, get_object_at(new_x, new_y));
     d32:	60 2f       	mov	r22, r16
     d34:	81 2f       	mov	r24, r17
     d36:	0e 94 ee 01 	call	0x3dc	; 0x3dc <get_object_at>
     d3a:	48 2f       	mov	r20, r24
     d3c:	60 2f       	mov	r22, r16
     d3e:	81 2f       	mov	r24, r17
     d40:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
	uint8_t new_x;
	uint8_t new_y;
	uint8_t moves[5][2] = {{0,0}, {0,-1}, {-1,0}, {1, 0}, {0, 1}};
	
	if (bomb_graphics_enabled == 0) {
		for (uint8_t i = 0; i < 5; i++) {
     d44:	f3 94       	inc	r15
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <bomb_graphics+0x74>
     d48:	f1 2c       	mov	r15, r1
     d4a:	94 e0       	ldi	r25, 0x04	; 4
     d4c:	9f 15       	cp	r25, r15
     d4e:	f8 f6       	brcc	.-66     	; 0xd0e <bomb_graphics+0x38>
			new_y = bomb_y + moves[i][1];
			
			update_square_colour(new_x, new_y, get_object_at(new_x, new_y));
		}
		
		bomb_x = 17;
     d50:	81 e1       	ldi	r24, 0x11	; 17
     d52:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <bomb_x>
		bomb_y = 17;
     d56:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <bomb_y>
     d5a:	1a c0       	rjmp	.+52     	; 0xd90 <bomb_graphics+0xba>
	} else {
		for (uint8_t i = 0; i < 5; i++) {
			new_x = bomb_x + moves[i][0];
     d5c:	e1 2f       	mov	r30, r17
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	8c 0f       	add	r24, r28
     d6a:	9d 1f       	adc	r25, r29
     d6c:	e8 0f       	add	r30, r24
     d6e:	f9 1f       	adc	r31, r25
     d70:	20 81       	ld	r18, Z
     d72:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <bomb_x>
			new_y = bomb_y + moves[i][1];
     d76:	61 81       	ldd	r22, Z+1	; 0x01
     d78:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <bomb_y>
     d7c:	69 0f       	add	r22, r25
			
			update_square_colour(new_x, new_y, BOMB);
     d7e:	48 e0       	ldi	r20, 0x08	; 8
     d80:	82 0f       	add	r24, r18
     d82:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_square_colour>
		}
		
		bomb_x = 17;
		bomb_y = 17;
	} else {
		for (uint8_t i = 0; i < 5; i++) {
     d86:	1f 5f       	subi	r17, 0xFF	; 255
     d88:	15 30       	cpi	r17, 0x05	; 5
     d8a:	40 f3       	brcs	.-48     	; 0xd5c <bomb_graphics+0x86>
			new_y = bomb_y + moves[i][1];
			
			update_square_colour(new_x, new_y, BOMB);
		}
		
		bomb_graphics_enabled = 0;
     d8c:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <bomb_graphics_enabled>
	}
}
     d90:	2a 96       	adiw	r28, 0x0a	; 10
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	08 95       	ret

00000da8 <check_danger>:

void check_danger(void) {
	if (bomb_x == 17 && bomb_y == 17) {
     da8:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <bomb_x>
     dac:	81 31       	cpi	r24, 0x11	; 17
     dae:	31 f4       	brne	.+12     	; 0xdbc <check_danger+0x14>
     db0:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <bomb_y>
     db4:	81 31       	cpi	r24, 0x11	; 17
     db6:	11 f4       	brne	.+4      	; 0xdbc <check_danger+0x14>
		PORTD |= (0 << 4);
     db8:	8b b1       	in	r24, 0x0b	; 11
     dba:	8b b9       	out	0x0b, r24	; 11
	}
	
	if ((abs(player_x - bomb_x) <= 1 && abs(player_y - bomb_y) == 0) || (abs(player_x - bomb_x) == 0 && abs(player_y - bomb_y) <= 1)) {
     dbc:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <player_x>
     dc0:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <bomb_x>
     dc4:	83 2f       	mov	r24, r19
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	82 1b       	sub	r24, r18
     dca:	91 09       	sbc	r25, r1
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	03 97       	sbiw	r24, 0x03	; 3
     dd0:	30 f4       	brcc	.+12     	; 0xdde <check_danger+0x36>
     dd2:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <player_y>
     dd6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <bomb_y>
     dda:	98 17       	cp	r25, r24
     ddc:	61 f0       	breq	.+24     	; 0xdf6 <check_danger+0x4e>
     dde:	32 13       	cpse	r19, r18
     de0:	0e c0       	rjmp	.+28     	; 0xdfe <check_danger+0x56>
     de2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <player_y>
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <bomb_y>
     dec:	82 1b       	sub	r24, r18
     dee:	91 09       	sbc	r25, r1
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	03 97       	sbiw	r24, 0x03	; 3
     df4:	20 f4       	brcc	.+8      	; 0xdfe <check_danger+0x56>
		PORTD |= (1 << 4);
     df6:	8b b1       	in	r24, 0x0b	; 11
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	8b b9       	out	0x0b, r24	; 11
     dfc:	08 95       	ret
	} else {
		PORTD |= (0 << 4);
     dfe:	8b b1       	in	r24, 0x0b	; 11
     e00:	8b b9       	out	0x0b, r24	; 11
     e02:	08 95       	ret

00000e04 <display_digit>:
	}
}

void display_digit(uint8_t number, uint8_t digit) {
	PORTD = (digit << 2);	// ? test
     e04:	96 2f       	mov	r25, r22
     e06:	99 0f       	add	r25, r25
     e08:	99 0f       	add	r25, r25
     e0a:	9b b9       	out	0x0b, r25	; 11
	if (!(digit == 1 && number == 0)) {
     e0c:	61 30       	cpi	r22, 0x01	; 1
     e0e:	11 f4       	brne	.+4      	; 0xe14 <display_digit+0x10>
     e10:	88 23       	and	r24, r24
     e12:	39 f0       	breq	.+14     	; 0xe22 <display_digit+0x1e>
		PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     e14:	e8 2f       	mov	r30, r24
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	ef 5b       	subi	r30, 0xBF	; 191
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	80 81       	ld	r24, Z
     e1e:	88 b9       	out	0x08, r24	; 8
     e20:	08 95       	ret
	} else {
		PORTC = 0;
     e22:	18 b8       	out	0x08, r1	; 8
     e24:	08 95       	ret

00000e26 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	0e 94 15 0c 	call	0x182a	; 0x182a <spi_setup_master>
     e2c:	08 95       	ret

00000e2e <ledmatrix_update_pixel>:
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	80 31       	cpi	r24, 0x10	; 16
     e36:	b0 f4       	brcc	.+44     	; 0xe64 <ledmatrix_update_pixel+0x36>
     e38:	68 30       	cpi	r22, 0x08	; 8
     e3a:	a0 f4       	brcc	.+40     	; 0xe64 <ledmatrix_update_pixel+0x36>
     e3c:	14 2f       	mov	r17, r20
     e3e:	c6 2f       	mov	r28, r22
     e40:	d8 2f       	mov	r29, r24
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	0e 94 41 0c 	call	0x1882	; 0x1882 <spi_send_byte>
     e48:	6c 2f       	mov	r22, r28
     e4a:	67 70       	andi	r22, 0x07	; 7
     e4c:	80 e1       	ldi	r24, 0x10	; 16
     e4e:	68 9f       	mul	r22, r24
     e50:	90 01       	movw	r18, r0
     e52:	11 24       	eor	r1, r1
     e54:	8d 2f       	mov	r24, r29
     e56:	8f 70       	andi	r24, 0x0F	; 15
     e58:	82 2b       	or	r24, r18
     e5a:	0e 94 41 0c 	call	0x1882	; 0x1882 <spi_send_byte>
     e5e:	81 2f       	mov	r24, r17
     e60:	0e 94 41 0c 	call	0x1882	; 0x1882 <spi_send_byte>
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	08 95       	ret

00000e6c <ledmatrix_update_column>:
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	80 31       	cpi	r24, 0x10	; 16
     e74:	a0 f4       	brcc	.+40     	; 0xe9e <ledmatrix_update_column+0x32>
     e76:	8b 01       	movw	r16, r22
     e78:	c8 2f       	mov	r28, r24
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	0e 94 41 0c 	call	0x1882	; 0x1882 <spi_send_byte>
     e80:	8c 2f       	mov	r24, r28
     e82:	8f 70       	andi	r24, 0x0F	; 15
     e84:	0e 94 41 0c 	call	0x1882	; 0x1882 <spi_send_byte>
     e88:	c0 e0       	ldi	r28, 0x00	; 0
     e8a:	07 c0       	rjmp	.+14     	; 0xe9a <ledmatrix_update_column+0x2e>
     e8c:	f8 01       	movw	r30, r16
     e8e:	ec 0f       	add	r30, r28
     e90:	f1 1d       	adc	r31, r1
     e92:	80 81       	ld	r24, Z
     e94:	0e 94 41 0c 	call	0x1882	; 0x1882 <spi_send_byte>
     e98:	cf 5f       	subi	r28, 0xFF	; 255
     e9a:	c8 30       	cpi	r28, 0x08	; 8
     e9c:	b8 f3       	brcs	.-18     	; 0xe8c <ledmatrix_update_column+0x20>
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     ea6:	8f e0       	ldi	r24, 0x0F	; 15
     ea8:	0e 94 41 0c 	call	0x1882	; 0x1882 <spi_send_byte>
     eac:	08 95       	ret

00000eae <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     eae:	0e 94 13 07 	call	0xe26	; 0xe26 <ledmatrix_setup>
	init_button_interrupts();
     eb2:	0e 94 a1 00 	call	0x142	; 0x142 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	7b e4       	ldi	r23, 0x4B	; 75
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 2d 0b 	call	0x165a	; 0x165a <init_serial_stdio>
	
	init_timer0();
     ec4:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <init_timer0>
	
	// Turn on global interrupts
	sei();
     ec8:	78 94       	sei
	
	// PIN OUTS
	DDRD |= (1 << 3);	// Diamond Indicator LED
     eca:	8a b1       	in	r24, 0x0a	; 10
     ecc:	88 60       	ori	r24, 0x08	; 8
     ece:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << 4);	// Danger LED
     ed0:	8a b1       	in	r24, 0x0a	; 10
     ed2:	80 61       	ori	r24, 0x10	; 16
     ed4:	8a b9       	out	0x0a, r24	; 10
	
	DDRC |= 0xFF;		// SSD
     ed6:	87 b1       	in	r24, 0x07	; 7
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << 2);	// Digit select
     edc:	8a b1       	in	r24, 0x0a	; 10
     ede:	84 60       	ori	r24, 0x04	; 4
     ee0:	8a b9       	out	0x0a, r24	; 10
	
	// OCR mode every 1 millisecond
	// then reset to 0
	// divide clock by 8 and count 100 cycles (0 to 999)
	
	OCR1A = 999;
     ee2:	87 ee       	ldi	r24, 0xE7	; 231
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     eea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = (0 << COM1A1) | (1 << COM1A0) | (0 << WGM11) | (0 << WGM10);	// toggle OC1A on compare match, least 2 significant WGM bits
     eee:	80 e4       	ldi	r24, 0x40	; 64
     ef0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (0 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10); // Two most significant WGM bits, divide clock by 8
     ef4:	9a e0       	ldi	r25, 0x0A	; 10
     ef6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// joystick
	
	ADMUX = (1 << REFS0);
     efa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
     efe:	86 e8       	ldi	r24, 0x86	; 134
     f00:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f04:	08 95       	ret

00000f06 <start_screen>:
}

void start_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     f06:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <clear_terminal>
	move_terminal_cursor(10,10);
     f0a:	6a e0       	ldi	r22, 0x0A	; 10
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	8a e0       	ldi	r24, 0x0A	; 10
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	printf_P(PSTR("Diamond Miners"));
     f16:	86 ee       	ldi	r24, 0xE6	; 230
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9f 93       	push	r25
     f1c:	8f 93       	push	r24
     f1e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <printf_P>
	move_terminal_cursor(10,12);
     f22:	6c e0       	ldi	r22, 0x0C	; 12
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	8a e0       	ldi	r24, 0x0A	; 10
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	printf_P(PSTR("CSSE2010 project by Hugo Burton"));
     f2e:	86 ec       	ldi	r24, 0xC6	; 198
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9f 93       	push	r25
     f34:	8f 93       	push	r24
     f36:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <printf_P>
	move_terminal_cursor(1,1);
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	start_display();
     f46:	0e 94 22 01 	call	0x244	; 0x244 <start_display>
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     f52:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <serial_input_available>
     f56:	88 23       	and	r24, r24
     f58:	39 f0       	breq	.+14     	; 0xf68 <start_screen+0x62>
			serial_input = fgetc(stdin);
     f5a:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <__iob>
     f5e:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <__iob+0x1>
     f62:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fgetc>
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <start_screen+0x64>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     f68:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     f6a:	83 37       	cpi	r24, 0x73	; 115
     f6c:	31 f0       	breq	.+12     	; 0xf7a <start_screen+0x74>
     f6e:	83 35       	cpi	r24, 0x53	; 83
     f70:	21 f0       	breq	.+8      	; 0xf7a <start_screen+0x74>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     f72:	0e 94 b1 00 	call	0x162	; 0x162 <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     f76:	8f 3f       	cpi	r24, 0xFF	; 255
     f78:	61 f3       	breq	.-40     	; 0xf52 <start_screen+0x4c>
     f7a:	08 95       	ret

00000f7c <new_game>:
	}
}

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     f7c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <clear_terminal>
	
	move_terminal_cursor(45,2);
     f80:	62 e0       	ldi	r22, 0x02	; 2
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	8d e2       	ldi	r24, 0x2D	; 45
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	printf_P(PSTR("Diamonds Collected: 0"));
     f8c:	80 eb       	ldi	r24, 0xB0	; 176
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	9f 93       	push	r25
     f92:	8f 93       	push	r24
     f94:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <printf_P>
	move_terminal_cursor(45,3);
     f98:	63 e0       	ldi	r22, 0x03	; 3
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	8d e2       	ldi	r24, 0x2D	; 45
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	printf_P(PSTR("Cheats: off"));
     fa4:	84 ea       	ldi	r24, 0xA4	; 164
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9f 93       	push	r25
     faa:	8f 93       	push	r24
     fac:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <printf_P>
	move_terminal_cursor(1,1);
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	
	// Initialise the game and display
	initialise_game();
     fbc:	0e 94 3e 03 	call	0x67c	; 0x67c <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     fc0:	0e 94 b1 00 	call	0x162	; 0x162 <button_pushed>
	clear_serial_input_buffer();
     fc4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <clear_serial_input_buffer>
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	08 95       	ret

00000fd2 <play_game>:

void play_game(void) {
     fd2:	3f 92       	push	r3
     fd4:	4f 92       	push	r4
     fd6:	5f 92       	push	r5
     fd8:	6f 92       	push	r6
     fda:	7f 92       	push	r7
     fdc:	8f 92       	push	r8
     fde:	9f 92       	push	r9
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	2e 97       	sbiw	r28, 0x0e	; 14
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
	uint8_t digit;
	uint8_t value;
	uint8_t x_or_y = 0;		/* 0 = x, 1 = y */
	uint16_t joy;
	
	last_flash_time = get_current_time();
    1004:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
    1008:	4b 01       	movw	r8, r22
    100a:	5c 01       	movw	r10, r24
	last_diamond_time = get_current_time();
    100c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
    1010:	69 87       	std	Y+9, r22	; 0x09
    1012:	7a 87       	std	Y+10, r23	; 0x0a
    1014:	8b 87       	std	Y+11, r24	; 0x0b
    1016:	9c 87       	std	Y+12, r25	; 0x0c
	last_joy_time = get_current_time();
    1018:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
    101c:	6d 83       	std	Y+5, r22	; 0x05
    101e:	7e 83       	std	Y+6, r23	; 0x06
    1020:	8f 83       	std	Y+7, r24	; 0x07
    1022:	98 87       	std	Y+8, r25	; 0x08
	uint32_t bomb_time = 0;
	uint8_t bomb_placed = 0;
	uint8_t steps = 0;
	uint8_t digit;
	uint8_t value;
	uint8_t x_or_y = 0;		/* 0 = x, 1 = y */
    1024:	1e 86       	std	Y+14, r1	; 0x0e
	last_flash_time = get_current_time();
	last_diamond_time = get_current_time();
	last_joy_time = get_current_time();
	char serial_input = -1;
	
	digit = 0;
    1026:	19 82       	std	Y+1, r1	; 0x01
void play_game(void) {
	
	uint32_t last_flash_time, current_time, last_diamond_time, last_joy_time;
	uint8_t btn; //the button pushed
	uint32_t bomb_time = 0;
	uint8_t bomb_placed = 0;
    1028:	31 2c       	mov	r3, r1

void play_game(void) {
	
	uint32_t last_flash_time, current_time, last_diamond_time, last_joy_time;
	uint8_t btn; //the button pushed
	uint32_t bomb_time = 0;
    102a:	41 2c       	mov	r4, r1
    102c:	51 2c       	mov	r5, r1
    102e:	32 01       	movw	r6, r4
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	8d 87       	std	Y+13, r24	; 0x0d
	last_joy_time = get_current_time();
	char serial_input = -1;
	
	digit = 0;
	// We play the game until it's over
	while(!is_game_over()) {
    1034:	57 c2       	rjmp	.+1198   	; 0x14e4 <play_game+0x512>
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		btn = button_pushed();
    1036:	0e 94 b1 00 	call	0x162	; 0x162 <button_pushed>
		
		if (btn == BUTTON0_PUSHED) {	// right
    103a:	81 11       	cpse	r24, r1
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <play_game+0x76>
			// If button 0 is pushed, move right, i.e increase x by 1 and leave
			// y the same
			move_player(1, 0);
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    1046:	70 c0       	rjmp	.+224    	; 0x1128 <play_game+0x156>
		} else if (btn == BUTTON1_PUSHED) {		// down
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	29 f4       	brne	.+10     	; 0x1056 <play_game+0x84>
			move_player(0, -1);
    104c:	6f ef       	ldi	r22, 0xFF	; 255
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    1054:	69 c0       	rjmp	.+210    	; 0x1128 <play_game+0x156>
		} else if (btn == BUTTON2_PUSHED) {		// up
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	29 f4       	brne	.+10     	; 0x1064 <play_game+0x92>
			move_player(0, 1);
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    1062:	62 c0       	rjmp	.+196    	; 0x1128 <play_game+0x156>
		} else if (btn == BUTTON3_PUSHED) {		// left
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	29 f4       	brne	.+10     	; 0x1072 <play_game+0xa0>
			move_player(-1, 0);
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    1070:	5b c0       	rjmp	.+182    	; 0x1128 <play_game+0x156>
		} else if (serial_input_available()) {
    1072:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <serial_input_available>
    1076:	88 23       	and	r24, r24
    1078:	09 f4       	brne	.+2      	; 0x107c <play_game+0xaa>
    107a:	56 c0       	rjmp	.+172    	; 0x1128 <play_game+0x156>
			serial_input = fgetc(stdin);
    107c:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <__iob>
    1080:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <__iob+0x1>
    1084:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fgetc>
    1088:	18 2f       	mov	r17, r24
			if (serial_input == 'p' || serial_input == 'P') {		// Pause
    108a:	80 37       	cpi	r24, 0x70	; 112
    108c:	11 f0       	breq	.+4      	; 0x1092 <play_game+0xc0>
    108e:	80 35       	cpi	r24, 0x50	; 80
    1090:	11 f4       	brne	.+4      	; 0x1096 <play_game+0xc4>
				toggle_pause();
    1092:	0e 94 9d 03 	call	0x73a	; 0x73a <toggle_pause>
			}
			
			if (get_paused() == 0) {
    1096:	0e 94 c5 03 	call	0x78a	; 0x78a <get_paused>
    109a:	81 11       	cpse	r24, r1
    109c:	45 c0       	rjmp	.+138    	; 0x1128 <play_game+0x156>
				if (serial_input == 'd' || serial_input == 'D') {	// right
    109e:	14 36       	cpi	r17, 0x64	; 100
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <play_game+0xd4>
    10a2:	14 34       	cpi	r17, 0x44	; 68
    10a4:	29 f4       	brne	.+10     	; 0x10b0 <play_game+0xde>
					move_player(1, 0);
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    10ae:	3c c0       	rjmp	.+120    	; 0x1128 <play_game+0x156>
				} else if (serial_input == 's' || serial_input == 'S') {	// down
    10b0:	13 37       	cpi	r17, 0x73	; 115
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <play_game+0xe6>
    10b4:	13 35       	cpi	r17, 0x53	; 83
    10b6:	29 f4       	brne	.+10     	; 0x10c2 <play_game+0xf0>
					move_player(0, -1);
    10b8:	6f ef       	ldi	r22, 0xFF	; 255
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    10c0:	33 c0       	rjmp	.+102    	; 0x1128 <play_game+0x156>
				} else if (serial_input == 'w' || serial_input == 'W') {	// up
    10c2:	17 37       	cpi	r17, 0x77	; 119
    10c4:	11 f0       	breq	.+4      	; 0x10ca <play_game+0xf8>
    10c6:	17 35       	cpi	r17, 0x57	; 87
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <play_game+0x102>
					move_player(0, 1);
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    10d2:	2a c0       	rjmp	.+84     	; 0x1128 <play_game+0x156>
				} else if (serial_input == 'a' || serial_input == 'A') {	// left
    10d4:	11 36       	cpi	r17, 0x61	; 97
    10d6:	11 f0       	breq	.+4      	; 0x10dc <play_game+0x10a>
    10d8:	11 34       	cpi	r17, 0x41	; 65
    10da:	29 f4       	brne	.+10     	; 0x10e6 <play_game+0x114>
					move_player(-1, 0);
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    10e4:	21 c0       	rjmp	.+66     	; 0x1128 <play_game+0x156>
				} else if (serial_input == 'e' || serial_input == 'E') {	// inspect
    10e6:	15 36       	cpi	r17, 0x65	; 101
    10e8:	11 f0       	breq	.+4      	; 0x10ee <play_game+0x11c>
    10ea:	15 34       	cpi	r17, 0x45	; 69
    10ec:	19 f4       	brne	.+6      	; 0x10f4 <play_game+0x122>
					// inspect block
					inspect_block();
    10ee:	0e 94 43 03 	call	0x686	; 0x686 <inspect_block>
    10f2:	1a c0       	rjmp	.+52     	; 0x1128 <play_game+0x156>
				} else if (serial_input == 'c' || serial_input == 'C') {	// cheats
    10f4:	13 36       	cpi	r17, 0x63	; 99
    10f6:	11 f0       	breq	.+4      	; 0x10fc <play_game+0x12a>
    10f8:	13 34       	cpi	r17, 0x43	; 67
    10fa:	19 f4       	brne	.+6      	; 0x1102 <play_game+0x130>
					toggle_cheats();
    10fc:	0e 94 75 03 	call	0x6ea	; 0x6ea <toggle_cheats>
    1100:	13 c0       	rjmp	.+38     	; 0x1128 <play_game+0x156>
				} else if (serial_input == ' ') {
    1102:	10 32       	cpi	r17, 0x20	; 32
    1104:	59 f4       	brne	.+22     	; 0x111c <play_game+0x14a>
					if (bomb_placed == 0) {
    1106:	31 10       	cpse	r3, r1
    1108:	0f c0       	rjmp	.+30     	; 0x1128 <play_game+0x156>
						bomb_placed = 1;
						place_bomb();
    110a:	0e 94 c3 05 	call	0xb86	; 0xb86 <place_bomb>
						// set timer
						bomb_time = get_current_time();
    110e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
    1112:	2b 01       	movw	r4, r22
    1114:	3c 01       	movw	r6, r24
					inspect_block();
				} else if (serial_input == 'c' || serial_input == 'C') {	// cheats
					toggle_cheats();
				} else if (serial_input == ' ') {
					if (bomb_placed == 0) {
						bomb_placed = 1;
    1116:	33 24       	eor	r3, r3
    1118:	33 94       	inc	r3
    111a:	06 c0       	rjmp	.+12     	; 0x1128 <play_game+0x156>
						place_bomb();
						// set timer
						bomb_time = get_current_time();
					}
				} else if (serial_input == 'f' || serial_input == 'F') {	// field of view
    111c:	16 36       	cpi	r17, 0x66	; 102
    111e:	11 f0       	breq	.+4      	; 0x1124 <play_game+0x152>
    1120:	16 34       	cpi	r17, 0x46	; 70
    1122:	11 f4       	brne	.+4      	; 0x1128 <play_game+0x156>
					toggle_field_of_view();
    1124:	0e 94 31 04 	call	0x862	; 0x862 <toggle_field_of_view>
			
		}
		
		// SSD step counter
		
		steps = get_steps();
    1128:	0e 94 64 02 	call	0x4c8	; 0x4c8 <get_steps>
    112c:	28 2f       	mov	r18, r24
		
		if (digit == 0) {
    112e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1130:	a1 11       	cpse	r26, r1
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <play_game+0x184>
			value = steps % 10;
    1134:	9d ec       	ldi	r25, 0xCD	; 205
    1136:	89 9f       	mul	r24, r25
    1138:	91 2d       	mov	r25, r1
    113a:	11 24       	eor	r1, r1
    113c:	89 2f       	mov	r24, r25
    113e:	86 95       	lsr	r24
    1140:	86 95       	lsr	r24
    1142:	86 95       	lsr	r24
    1144:	98 2f       	mov	r25, r24
    1146:	99 0f       	add	r25, r25
    1148:	89 2f       	mov	r24, r25
    114a:	88 0f       	add	r24, r24
    114c:	88 0f       	add	r24, r24
    114e:	89 0f       	add	r24, r25
    1150:	28 1b       	sub	r18, r24
    1152:	82 2f       	mov	r24, r18
    1154:	14 c0       	rjmp	.+40     	; 0x117e <play_game+0x1ac>
			} else {
			value = (steps / 10) % 10;
    1156:	9d ec       	ldi	r25, 0xCD	; 205
    1158:	89 9f       	mul	r24, r25
    115a:	21 2d       	mov	r18, r1
    115c:	11 24       	eor	r1, r1
    115e:	26 95       	lsr	r18
    1160:	26 95       	lsr	r18
    1162:	26 95       	lsr	r18
    1164:	29 9f       	mul	r18, r25
    1166:	81 2d       	mov	r24, r1
    1168:	11 24       	eor	r1, r1
    116a:	86 95       	lsr	r24
    116c:	86 95       	lsr	r24
    116e:	86 95       	lsr	r24
    1170:	88 0f       	add	r24, r24
    1172:	98 2f       	mov	r25, r24
    1174:	99 0f       	add	r25, r25
    1176:	99 0f       	add	r25, r25
    1178:	89 0f       	add	r24, r25
    117a:	28 1b       	sub	r18, r24
    117c:	82 2f       	mov	r24, r18
		}
		
		display_digit(value, digit);
    117e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1180:	0e 94 02 07 	call	0xe04	; 0xe04 <display_digit>
		digit = 1 - digit;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	bd 85       	ldd	r27, Y+13	; 0x0d
    1188:	8b 1b       	sub	r24, r27
    118a:	8d 87       	std	Y+13, r24	; 0x0d
		
		// timer
		
		while ((TIFR1 & (1 << OCF1A)) == 0) {
    118c:	b1 9b       	sbis	0x16, 1	; 22
    118e:	fe cf       	rjmp	.-4      	; 0x118c <play_game+0x1ba>
			;	/* Do nothing - wait for the bit to be set */
		}
		
		/* Clear the output compare flag - by writing a 1 to it. */
		TIFR1 &= (1 << OCF1A);
    1190:	86 b3       	in	r24, 0x16	; 22
    1192:	82 70       	andi	r24, 0x02	; 2
    1194:	86 bb       	out	0x16, r24	; 22
		
		// when paused skip after this if statement
		
		if (get_paused() == 1) {
    1196:	0e 94 c5 03 	call	0x78a	; 0x78a <get_paused>
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <play_game+0x1ce>
    119e:	a2 c1       	rjmp	.+836    	; 0x14e4 <play_game+0x512>
			continue;
		}
		
		current_time = get_current_time();
    11a0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
    11a4:	6b 01       	movw	r12, r22
    11a6:	7c 01       	movw	r14, r24
		if(current_time >= last_flash_time + 500) {
    11a8:	d5 01       	movw	r26, r10
    11aa:	c4 01       	movw	r24, r8
    11ac:	8c 50       	subi	r24, 0x0C	; 12
    11ae:	9e 4f       	sbci	r25, 0xFE	; 254
    11b0:	af 4f       	sbci	r26, 0xFF	; 255
    11b2:	bf 4f       	sbci	r27, 0xFF	; 255
    11b4:	c8 16       	cp	r12, r24
    11b6:	d9 06       	cpc	r13, r25
    11b8:	ea 06       	cpc	r14, r26
    11ba:	fb 06       	cpc	r15, r27
    11bc:	20 f0       	brcs	.+8      	; 0x11c6 <play_game+0x1f4>
			// 500ms (0.5 second) has passed since the last time we
			// flashed the cursor, so flash the cursor
			flash_facing();
    11be:	0e 94 31 02 	call	0x462	; 0x462 <flash_facing>
			
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
    11c2:	46 01       	movw	r8, r12
    11c4:	57 01       	movw	r10, r14
			
		}
		
		// diamond led
		// update distance to diamond led
		int8_t d_dis = distance_to_diamond();
    11c6:	0e 94 83 05 	call	0xb06	; 0xb06 <distance_to_diamond>
		int flash = 0;
		if (d_dis == 4) {
    11ca:	84 30       	cpi	r24, 0x04	; 4
    11cc:	49 f0       	breq	.+18     	; 0x11e0 <play_game+0x20e>
			flash = 1500;
		} else if (d_dis == 3) {
    11ce:	83 30       	cpi	r24, 0x03	; 3
    11d0:	51 f0       	breq	.+20     	; 0x11e6 <play_game+0x214>
			flash = 1000;
		} else if (d_dis == 2) {
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	59 f0       	breq	.+22     	; 0x11ec <play_game+0x21a>
			flash = 500;
		} else if (d_dis == 1) {
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <play_game+0x220>
		}
		
		// diamond led
		// update distance to diamond led
		int8_t d_dis = distance_to_diamond();
		int flash = 0;
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	0b c0       	rjmp	.+22     	; 0x11f6 <play_game+0x224>
		if (d_dis == 4) {
			flash = 1500;
    11e0:	0c ed       	ldi	r16, 0xDC	; 220
    11e2:	15 e0       	ldi	r17, 0x05	; 5
    11e4:	08 c0       	rjmp	.+16     	; 0x11f6 <play_game+0x224>
		} else if (d_dis == 3) {
			flash = 1000;
    11e6:	08 ee       	ldi	r16, 0xE8	; 232
    11e8:	13 e0       	ldi	r17, 0x03	; 3
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <play_game+0x224>
		} else if (d_dis == 2) {
			flash = 500;
    11ec:	04 ef       	ldi	r16, 0xF4	; 244
    11ee:	11 e0       	ldi	r17, 0x01	; 1
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <play_game+0x224>
		} else if (d_dis == 1) {
			flash = 250;
    11f2:	0a ef       	ldi	r16, 0xFA	; 250
    11f4:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		current_time = get_current_time();
    11f6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
    11fa:	6b 01       	movw	r12, r22
    11fc:	7c 01       	movw	r14, r24
		if (flash != 0) {
    11fe:	01 15       	cp	r16, r1
    1200:	11 05       	cpc	r17, r1
    1202:	b9 f0       	breq	.+46     	; 0x1232 <play_game+0x260>
			if (current_time >= last_diamond_time + flash) {
    1204:	01 2e       	mov	r0, r17
    1206:	00 0c       	add	r0, r0
    1208:	22 0b       	sbc	r18, r18
    120a:	33 0b       	sbc	r19, r19
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	ab 85       	ldd	r26, Y+11	; 0x0b
    1212:	bc 85       	ldd	r27, Y+12	; 0x0c
    1214:	08 0f       	add	r16, r24
    1216:	19 1f       	adc	r17, r25
    1218:	2a 1f       	adc	r18, r26
    121a:	3b 1f       	adc	r19, r27
    121c:	c0 16       	cp	r12, r16
    121e:	d1 06       	cpc	r13, r17
    1220:	e2 06       	cpc	r14, r18
    1222:	f3 06       	cpc	r15, r19
    1224:	30 f0       	brcs	.+12     	; 0x1232 <play_game+0x260>
				flash_diamond();
    1226:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <flash_diamond>
				
				last_diamond_time = current_time;
    122a:	c9 86       	std	Y+9, r12	; 0x09
    122c:	da 86       	std	Y+10, r13	; 0x0a
    122e:	eb 86       	std	Y+11, r14	; 0x0b
    1230:	fc 86       	std	Y+12, r15	; 0x0c
			}
		}
		
		// Bombs
		
		current_time = get_current_time();
    1232:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
    1236:	6b 01       	movw	r12, r22
    1238:	7c 01       	movw	r14, r24
		if (bomb_placed == 1) {
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	39 12       	cpse	r3, r25
    123e:	b7 c0       	rjmp	.+366    	; 0x13ae <play_game+0x3dc>
			if (current_time >= (bomb_time + 2000)) {
    1240:	d3 01       	movw	r26, r6
    1242:	c2 01       	movw	r24, r4
    1244:	80 53       	subi	r24, 0x30	; 48
    1246:	98 4f       	sbci	r25, 0xF8	; 248
    1248:	af 4f       	sbci	r26, 0xFF	; 255
    124a:	bf 4f       	sbci	r27, 0xFF	; 255
    124c:	c8 16       	cp	r12, r24
    124e:	d9 06       	cpc	r13, r25
    1250:	ea 06       	cpc	r14, r26
    1252:	fb 06       	cpc	r15, r27
    1254:	48 f0       	brcs	.+18     	; 0x1268 <play_game+0x296>
				bomb_placed = 2;
				detonate_bomb();
    1256:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <detonate_bomb>
				bomb_graphics();
    125a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <bomb_graphics>
				check_danger();
    125e:	0e 94 d4 06 	call	0xda8	; 0xda8 <check_danger>
		// Bombs
		
		current_time = get_current_time();
		if (bomb_placed == 1) {
			if (current_time >= (bomb_time + 2000)) {
				bomb_placed = 2;
    1262:	68 94       	set
    1264:	33 24       	eor	r3, r3
    1266:	31 f8       	bld	r3, 1
				detonate_bomb();
				bomb_graphics();
				check_danger();
			}
			
			if (current_time == (bomb_time + 250)) {
    1268:	d3 01       	movw	r26, r6
    126a:	c2 01       	movw	r24, r4
    126c:	86 50       	subi	r24, 0x06	; 6
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	af 4f       	sbci	r26, 0xFF	; 255
    1272:	bf 4f       	sbci	r27, 0xFF	; 255
    1274:	c8 16       	cp	r12, r24
    1276:	d9 06       	cpc	r13, r25
    1278:	ea 06       	cpc	r14, r26
    127a:	fb 06       	cpc	r15, r27
    127c:	19 f4       	brne	.+6      	; 0x1284 <play_game+0x2b2>
				flash_bomb();
    127e:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    1282:	93 c0       	rjmp	.+294    	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 500)) {
    1284:	d3 01       	movw	r26, r6
    1286:	c2 01       	movw	r24, r4
    1288:	8c 50       	subi	r24, 0x0C	; 12
    128a:	9e 4f       	sbci	r25, 0xFE	; 254
    128c:	af 4f       	sbci	r26, 0xFF	; 255
    128e:	bf 4f       	sbci	r27, 0xFF	; 255
    1290:	c8 16       	cp	r12, r24
    1292:	d9 06       	cpc	r13, r25
    1294:	ea 06       	cpc	r14, r26
    1296:	fb 06       	cpc	r15, r27
    1298:	19 f4       	brne	.+6      	; 0x12a0 <play_game+0x2ce>
				flash_bomb();
    129a:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    129e:	85 c0       	rjmp	.+266    	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 750)) {
    12a0:	d3 01       	movw	r26, r6
    12a2:	c2 01       	movw	r24, r4
    12a4:	82 51       	subi	r24, 0x12	; 18
    12a6:	9d 4f       	sbci	r25, 0xFD	; 253
    12a8:	af 4f       	sbci	r26, 0xFF	; 255
    12aa:	bf 4f       	sbci	r27, 0xFF	; 255
    12ac:	c8 16       	cp	r12, r24
    12ae:	d9 06       	cpc	r13, r25
    12b0:	ea 06       	cpc	r14, r26
    12b2:	fb 06       	cpc	r15, r27
    12b4:	19 f4       	brne	.+6      	; 0x12bc <play_game+0x2ea>
				flash_bomb();
    12b6:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    12ba:	77 c0       	rjmp	.+238    	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 1000)) {
    12bc:	d3 01       	movw	r26, r6
    12be:	c2 01       	movw	r24, r4
    12c0:	88 51       	subi	r24, 0x18	; 24
    12c2:	9c 4f       	sbci	r25, 0xFC	; 252
    12c4:	af 4f       	sbci	r26, 0xFF	; 255
    12c6:	bf 4f       	sbci	r27, 0xFF	; 255
    12c8:	c8 16       	cp	r12, r24
    12ca:	d9 06       	cpc	r13, r25
    12cc:	ea 06       	cpc	r14, r26
    12ce:	fb 06       	cpc	r15, r27
    12d0:	19 f4       	brne	.+6      	; 0x12d8 <play_game+0x306>
				flash_bomb();
    12d2:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    12d6:	69 c0       	rjmp	.+210    	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 1250)) {
    12d8:	d3 01       	movw	r26, r6
    12da:	c2 01       	movw	r24, r4
    12dc:	8e 51       	subi	r24, 0x1E	; 30
    12de:	9b 4f       	sbci	r25, 0xFB	; 251
    12e0:	af 4f       	sbci	r26, 0xFF	; 255
    12e2:	bf 4f       	sbci	r27, 0xFF	; 255
    12e4:	c8 16       	cp	r12, r24
    12e6:	d9 06       	cpc	r13, r25
    12e8:	ea 06       	cpc	r14, r26
    12ea:	fb 06       	cpc	r15, r27
    12ec:	19 f4       	brne	.+6      	; 0x12f4 <play_game+0x322>
				flash_bomb();
    12ee:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    12f2:	5b c0       	rjmp	.+182    	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 1500)) {
    12f4:	d3 01       	movw	r26, r6
    12f6:	c2 01       	movw	r24, r4
    12f8:	84 52       	subi	r24, 0x24	; 36
    12fa:	9a 4f       	sbci	r25, 0xFA	; 250
    12fc:	af 4f       	sbci	r26, 0xFF	; 255
    12fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1300:	c8 16       	cp	r12, r24
    1302:	d9 06       	cpc	r13, r25
    1304:	ea 06       	cpc	r14, r26
    1306:	fb 06       	cpc	r15, r27
    1308:	19 f4       	brne	.+6      	; 0x1310 <play_game+0x33e>
				flash_bomb();
    130a:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    130e:	4d c0       	rjmp	.+154    	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 1600)) {
    1310:	d3 01       	movw	r26, r6
    1312:	c2 01       	movw	r24, r4
    1314:	80 5c       	subi	r24, 0xC0	; 192
    1316:	99 4f       	sbci	r25, 0xF9	; 249
    1318:	af 4f       	sbci	r26, 0xFF	; 255
    131a:	bf 4f       	sbci	r27, 0xFF	; 255
    131c:	c8 16       	cp	r12, r24
    131e:	d9 06       	cpc	r13, r25
    1320:	ea 06       	cpc	r14, r26
    1322:	fb 06       	cpc	r15, r27
    1324:	19 f4       	brne	.+6      	; 0x132c <play_game+0x35a>
				flash_bomb();
    1326:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    132a:	3f c0       	rjmp	.+126    	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 1700)) {
    132c:	d3 01       	movw	r26, r6
    132e:	c2 01       	movw	r24, r4
    1330:	8c 55       	subi	r24, 0x5C	; 92
    1332:	99 4f       	sbci	r25, 0xF9	; 249
    1334:	af 4f       	sbci	r26, 0xFF	; 255
    1336:	bf 4f       	sbci	r27, 0xFF	; 255
    1338:	c8 16       	cp	r12, r24
    133a:	d9 06       	cpc	r13, r25
    133c:	ea 06       	cpc	r14, r26
    133e:	fb 06       	cpc	r15, r27
    1340:	19 f4       	brne	.+6      	; 0x1348 <play_game+0x376>
				flash_bomb();
    1342:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    1346:	31 c0       	rjmp	.+98     	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 1800)) {
    1348:	d3 01       	movw	r26, r6
    134a:	c2 01       	movw	r24, r4
    134c:	88 5f       	subi	r24, 0xF8	; 248
    134e:	98 4f       	sbci	r25, 0xF8	; 248
    1350:	af 4f       	sbci	r26, 0xFF	; 255
    1352:	bf 4f       	sbci	r27, 0xFF	; 255
    1354:	c8 16       	cp	r12, r24
    1356:	d9 06       	cpc	r13, r25
    1358:	ea 06       	cpc	r14, r26
    135a:	fb 06       	cpc	r15, r27
    135c:	19 f4       	brne	.+6      	; 0x1364 <play_game+0x392>
				flash_bomb();
    135e:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    1362:	23 c0       	rjmp	.+70     	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 1800)) {
    1364:	c8 16       	cp	r12, r24
    1366:	d9 06       	cpc	r13, r25
    1368:	ea 06       	cpc	r14, r26
    136a:	fb 06       	cpc	r15, r27
    136c:	19 f4       	brne	.+6      	; 0x1374 <play_game+0x3a2>
				flash_bomb();
    136e:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    1372:	1b c0       	rjmp	.+54     	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 1900)) {
    1374:	d3 01       	movw	r26, r6
    1376:	c2 01       	movw	r24, r4
    1378:	84 59       	subi	r24, 0x94	; 148
    137a:	98 4f       	sbci	r25, 0xF8	; 248
    137c:	af 4f       	sbci	r26, 0xFF	; 255
    137e:	bf 4f       	sbci	r27, 0xFF	; 255
    1380:	c8 16       	cp	r12, r24
    1382:	d9 06       	cpc	r13, r25
    1384:	ea 06       	cpc	r14, r26
    1386:	fb 06       	cpc	r15, r27
    1388:	19 f4       	brne	.+6      	; 0x1390 <play_game+0x3be>
				flash_bomb();
    138a:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
    138e:	0d c0       	rjmp	.+26     	; 0x13aa <play_game+0x3d8>
			} else if (current_time == (bomb_time + 1980)) {
    1390:	d3 01       	movw	r26, r6
    1392:	c2 01       	movw	r24, r4
    1394:	84 54       	subi	r24, 0x44	; 68
    1396:	98 4f       	sbci	r25, 0xF8	; 248
    1398:	af 4f       	sbci	r26, 0xFF	; 255
    139a:	bf 4f       	sbci	r27, 0xFF	; 255
    139c:	c8 16       	cp	r12, r24
    139e:	d9 06       	cpc	r13, r25
    13a0:	ea 06       	cpc	r14, r26
    13a2:	fb 06       	cpc	r15, r27
    13a4:	11 f4       	brne	.+4      	; 0x13aa <play_game+0x3d8>
				flash_bomb();
    13a6:	0e 94 53 06 	call	0xca6	; 0xca6 <flash_bomb>
			}
			
			// danger led
			check_danger();
    13aa:	0e 94 d4 06 	call	0xda8	; 0xda8 <check_danger>
		}
		
		if (bomb_placed == 2) {
    13ae:	a2 e0       	ldi	r26, 0x02	; 2
    13b0:	3a 12       	cpse	r3, r26
    13b2:	13 c0       	rjmp	.+38     	; 0x13da <play_game+0x408>
			current_time = get_current_time();
    13b4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
			if (current_time >= (bomb_time + 2100)) {
    13b8:	93 01       	movw	r18, r6
    13ba:	82 01       	movw	r16, r4
    13bc:	0c 5c       	subi	r16, 0xCC	; 204
    13be:	17 4f       	sbci	r17, 0xF7	; 247
    13c0:	2f 4f       	sbci	r18, 0xFF	; 255
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	60 17       	cp	r22, r16
    13c6:	71 07       	cpc	r23, r17
    13c8:	82 07       	cpc	r24, r18
    13ca:	93 07       	cpc	r25, r19
    13cc:	30 f0       	brcs	.+12     	; 0x13da <play_game+0x408>
				bomb_graphics();
    13ce:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <bomb_graphics>
				bomb_placed = 0;
    13d2:	31 2c       	mov	r3, r1
				bomb_time = 0;
    13d4:	41 2c       	mov	r4, r1
    13d6:	51 2c       	mov	r5, r1
    13d8:	32 01       	movw	r6, r4
			}
		}
		
		// Joystick
		
		if(x_or_y == 0) {
    13da:	be 85       	ldd	r27, Y+14	; 0x0e
    13dc:	b1 11       	cpse	r27, r1
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <play_game+0x41a>
			ADMUX &= ~1;
    13e0:	ec e7       	ldi	r30, 0x7C	; 124
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8e 7f       	andi	r24, 0xFE	; 254
    13e8:	80 83       	st	Z, r24
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <play_game+0x424>
		} else {
			ADMUX |= 1;
    13ec:	ec e7       	ldi	r30, 0x7C	; 124
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	81 60       	ori	r24, 0x01	; 1
    13f4:	80 83       	st	Z, r24
		}
		
		ADCSRA |= (1 << ADSC);
    13f6:	ea e7       	ldi	r30, 0x7A	; 122
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	80 64       	ori	r24, 0x40	; 64
    13fe:	80 83       	st	Z, r24
		
		while (ADCSRA & (1 << ADSC)) {
    1400:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1404:	86 fd       	sbrc	r24, 6
    1406:	fc cf       	rjmp	.-8      	; 0x1400 <play_game+0x42e>
			;
		}
		
		joy = ADC; // get joystick value
    1408:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    140c:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		/* 0 = x, 1 = y */
		
		current_time = get_current_time();
    1410:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
		if (current_time >= last_joy_time + pow(abs(500 - joy),-1) * 25000) {
    1414:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
    1418:	69 83       	std	Y+1, r22	; 0x01
    141a:	7a 83       	std	Y+2, r23	; 0x02
    141c:	8b 83       	std	Y+3, r24	; 0x03
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	84 ef       	ldi	r24, 0xF4	; 244
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	80 1b       	sub	r24, r16
    1426:	91 0b       	sbc	r25, r17
    1428:	bc 01       	movw	r22, r24
    142a:	22 f4       	brpl	.+8      	; 0x1434 <play_game+0x462>
    142c:	66 27       	eor	r22, r22
    142e:	77 27       	eor	r23, r23
    1430:	68 1b       	sub	r22, r24
    1432:	79 0b       	sbc	r23, r25
    1434:	07 2e       	mov	r0, r23
    1436:	00 0c       	add	r0, r0
    1438:	88 0b       	sbc	r24, r24
    143a:	99 0b       	sbc	r25, r25
    143c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatsisf>
    1440:	9b 01       	movw	r18, r22
    1442:	ac 01       	movw	r20, r24
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	80 e8       	ldi	r24, 0x80	; 128
    144a:	9f e3       	ldi	r25, 0x3F	; 63
    144c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__divsf3>
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e5       	ldi	r19, 0x50	; 80
    1454:	43 ec       	ldi	r20, 0xC3	; 195
    1456:	56 e4       	ldi	r21, 0x46	; 70
    1458:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__mulsf3>
    145c:	6b 01       	movw	r12, r22
    145e:	7c 01       	movw	r14, r24
    1460:	6d 81       	ldd	r22, Y+5	; 0x05
    1462:	7e 81       	ldd	r23, Y+6	; 0x06
    1464:	8f 81       	ldd	r24, Y+7	; 0x07
    1466:	98 85       	ldd	r25, Y+8	; 0x08
    1468:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
    146c:	a7 01       	movw	r20, r14
    146e:	96 01       	movw	r18, r12
    1470:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__addsf3>
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	69 81       	ldd	r22, Y+1	; 0x01
    147a:	7a 81       	ldd	r23, Y+2	; 0x02
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__gesf2>
    1484:	88 23       	and	r24, r24
    1486:	54 f1       	brlt	.+84     	; 0x14dc <play_game+0x50a>
		
			if (x_or_y == 0) {	// x
    1488:	8e 85       	ldd	r24, Y+14	; 0x0e
    148a:	81 11       	cpse	r24, r1
    148c:	11 c0       	rjmp	.+34     	; 0x14b0 <play_game+0x4de>
				if (joy > 700) {	// right
    148e:	0d 3b       	cpi	r16, 0xBD	; 189
    1490:	92 e0       	ldi	r25, 0x02	; 2
    1492:	19 07       	cpc	r17, r25
    1494:	28 f0       	brcs	.+10     	; 0x14a0 <play_game+0x4ce>
					move_player(1, 0);
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    149e:	18 c0       	rjmp	.+48     	; 0x14d0 <play_game+0x4fe>
				} else if (joy < 300) {		// left
    14a0:	0c 32       	cpi	r16, 0x2C	; 44
    14a2:	11 40       	sbci	r17, 0x01	; 1
    14a4:	a8 f4       	brcc	.+42     	; 0x14d0 <play_game+0x4fe>
					move_player(-1, 0);		
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    14ae:	10 c0       	rjmp	.+32     	; 0x14d0 <play_game+0x4fe>
				}
			} else {		// y
				if (joy > 700) {	// up
    14b0:	0d 3b       	cpi	r16, 0xBD	; 189
    14b2:	b2 e0       	ldi	r27, 0x02	; 2
    14b4:	1b 07       	cpc	r17, r27
    14b6:	28 f0       	brcs	.+10     	; 0x14c2 <play_game+0x4f0>
					move_player(0, 1);
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <play_game+0x4fe>
					} else if (joy < 300) {		// down
    14c2:	0c 32       	cpi	r16, 0x2C	; 44
    14c4:	11 40       	sbci	r17, 0x01	; 1
    14c6:	20 f4       	brcc	.+8      	; 0x14d0 <play_game+0x4fe>
					move_player(0, -1);
    14c8:	6f ef       	ldi	r22, 0xFF	; 255
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <move_player>
				}
			}
			
			last_joy_time = get_current_time();
    14d0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <get_current_time>
    14d4:	6d 83       	std	Y+5, r22	; 0x05
    14d6:	7e 83       	std	Y+6, r23	; 0x06
    14d8:	8f 83       	std	Y+7, r24	; 0x07
    14da:	98 87       	std	Y+8, r25	; 0x08
		}
		
		x_or_y ^= 1;	// do other axis next time
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e0:	98 27       	eor	r25, r24
    14e2:	9e 87       	std	Y+14, r25	; 0x0e
	last_joy_time = get_current_time();
	char serial_input = -1;
	
	digit = 0;
	// We play the game until it's over
	while(!is_game_over()) {
    14e4:	0e 94 67 02 	call	0x4ce	; 0x4ce <is_game_over>
    14e8:	88 23       	and	r24, r24
    14ea:	09 f4       	brne	.+2      	; 0x14ee <play_game+0x51c>
    14ec:	a4 cd       	rjmp	.-1208   	; 0x1036 <play_game+0x64>
		
		x_or_y ^= 1;	// do other axis next time
	}
	
	// We get here if the game is over.
}
    14ee:	2e 96       	adiw	r28, 0x0e	; 14
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	9f 90       	pop	r9
    1510:	8f 90       	pop	r8
    1512:	7f 90       	pop	r7
    1514:	6f 90       	pop	r6
    1516:	5f 90       	pop	r5
    1518:	4f 90       	pop	r4
    151a:	3f 90       	pop	r3
    151c:	08 95       	ret

0000151e <handle_game_over>:

void handle_game_over() {
	char serial_input = -1;
	
	move_terminal_cursor(10,14);
    151e:	6e e0       	ldi	r22, 0x0E	; 14
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	8a e0       	ldi	r24, 0x0A	; 10
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    152a:	8a e9       	ldi	r24, 0x9A	; 154
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9f 93       	push	r25
    1530:	8f 93       	push	r24
    1532:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <printf_P>
	move_terminal_cursor(10,15);
    1536:	6f e0       	ldi	r22, 0x0F	; 15
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	8a e0       	ldi	r24, 0x0A	; 10
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 47 0c 	call	0x188e	; 0x188e <move_terminal_cursor>
	printf_P(PSTR("Press a button to start again"));
    1542:	8c e7       	ldi	r24, 0x7C	; 124
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	9f 93       	push	r25
    1548:	8f 93       	push	r24
    154a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <printf_P>
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0b c0       	rjmp	.+22     	; 0x156e <handle_game_over+0x50>
		// check also for keyboard input
		if (serial_input_available()) {
    1558:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <serial_input_available>
    155c:	88 23       	and	r24, r24
    155e:	39 f0       	breq	.+14     	; 0x156e <handle_game_over+0x50>
			serial_input = fgetc(stdin);
    1560:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <__iob>
    1564:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <__iob+0x1>
    1568:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fgetc>
    156c:	08 95       	ret
	move_terminal_cursor(10,14);
	printf_P(PSTR("GAME OVER"));
	move_terminal_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
    156e:	0e 94 b1 00 	call	0x162	; 0x162 <button_pushed>
    1572:	8f 3f       	cpi	r24, 0xFF	; 255
    1574:	89 f3       	breq	.-30     	; 0x1558 <handle_game_over+0x3a>
    1576:	08 95       	ret

00001578 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1578:	0e 94 57 07 	call	0xeae	; 0xeae <initialise_hardware>
	
	// Show the splash screen message. Returns when display is complete
	start_screen();
    157c:	0e 94 83 07 	call	0xf06	; 0xf06 <start_screen>
	
	// Loop forever,
	while(1) {
		new_game();
    1580:	0e 94 be 07 	call	0xf7c	; 0xf7c <new_game>
		play_game();
    1584:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <play_game>
		handle_game_over();
    1588:	0e 94 8f 0a 	call	0x151e	; 0x151e <handle_game_over>
    158c:	f9 cf       	rjmp	.-14     	; 0x1580 <main+0x8>

0000158e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    158e:	cf 93       	push	r28
    1590:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1592:	8a 30       	cpi	r24, 0x0A	; 10
    1594:	19 f4       	brne	.+6      	; 0x159c <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1596:	8d e0       	ldi	r24, 0x0D	; 13
    1598:	0e 94 c7 0a 	call	0x158e	; 0x158e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    159c:	9f b7       	in	r25, 0x3f	; 63
    159e:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    15a2:	99 23       	and	r25, r25
    15a4:	29 f1       	breq	.+74     	; 0x15f0 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    15a6:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <bytes_in_out_buffer>
    15aa:	8f 3f       	cpi	r24, 0xFF	; 255
    15ac:	d1 f3       	breq	.-12     	; 0x15a2 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    15ae:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    15b0:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <out_insert_pos>
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	8e 0f       	add	r24, r30
    15b8:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <out_insert_pos>
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	e7 58       	subi	r30, 0x87	; 135
    15c0:	fc 4f       	sbci	r31, 0xFC	; 252
    15c2:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    15c4:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <bytes_in_out_buffer>
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    15ce:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <out_insert_pos>
    15d2:	8f 3f       	cpi	r24, 0xFF	; 255
    15d4:	11 f4       	brne	.+4      	; 0x15da <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    15d6:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    15da:	e1 ec       	ldi	r30, 0xC1	; 193
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 62       	ori	r24, 0x20	; 32
    15e2:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    15e4:	99 23       	and	r25, r25
    15e6:	39 f0       	breq	.+14     	; 0x15f6 <uart_put_char+0x68>
		sei();
    15e8:	78 94       	sei
	}
	return 0;
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
}
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    15fe:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <bytes_in_input_buffer>
    1602:	88 23       	and	r24, r24
    1604:	e1 f3       	breq	.-8      	; 0x15fe <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1606:	2f b7       	in	r18, 0x3f	; 63
    1608:	20 78       	andi	r18, 0x80	; 128
	cli();
    160a:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    160c:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <input_insert_pos>
    1610:	30 91 8a 04 	lds	r19, 0x048A	; 0x80048a <bytes_in_input_buffer>
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	83 1b       	sub	r24, r19
    1618:	91 09       	sbc	r25, r1
    161a:	5a f4       	brpl	.+22     	; 0x1632 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    161c:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <input_insert_pos>
    1620:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <bytes_in_input_buffer>
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	e8 1b       	sub	r30, r24
    1628:	f1 09       	sbc	r31, r1
    162a:	e7 57       	subi	r30, 0x77	; 119
    162c:	fb 4f       	sbci	r31, 0xFB	; 251
    162e:	80 81       	ld	r24, Z
    1630:	0a c0       	rjmp	.+20     	; 0x1646 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1632:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <input_insert_pos>
    1636:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <bytes_in_input_buffer>
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	e8 1b       	sub	r30, r24
    163e:	f1 09       	sbc	r31, r1
    1640:	e7 58       	subi	r30, 0x87	; 135
    1642:	fb 4f       	sbci	r31, 0xFB	; 251
    1644:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1646:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <bytes_in_input_buffer>
    164a:	91 50       	subi	r25, 0x01	; 1
    164c:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1650:	22 23       	and	r18, r18
    1652:	09 f0       	breq	.+2      	; 0x1656 <uart_get_char+0x58>
		sei();
    1654:	78 94       	sei
	}	
	return c;
}
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	08 95       	ret

0000165a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    165a:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <out_insert_pos>
	bytes_in_out_buffer = 0;
    165e:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1662:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1666:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <bytes_in_input_buffer>
	input_overrun = 0;
    166a:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    166e:	40 93 64 02 	sts	0x0264, r20	; 0x800264 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	aa 1f       	adc	r26, r26
    1684:	bb 1f       	adc	r27, r27
    1686:	9c 01       	movw	r18, r24
    1688:	ad 01       	movw	r20, r26
    168a:	22 0f       	add	r18, r18
    168c:	33 1f       	adc	r19, r19
    168e:	44 1f       	adc	r20, r20
    1690:	55 1f       	adc	r21, r21
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	72 e1       	ldi	r23, 0x12	; 18
    1696:	8a e7       	ldi	r24, 0x7A	; 122
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__divmodsi4>
    169e:	ba 01       	movw	r22, r20
    16a0:	a9 01       	movw	r20, r18
    16a2:	4f 5f       	subi	r20, 0xFF	; 255
    16a4:	5f 4f       	sbci	r21, 0xFF	; 255
    16a6:	6f 4f       	sbci	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	db 01       	movw	r26, r22
    16ac:	ca 01       	movw	r24, r20
    16ae:	1a f4       	brpl	.+6      	; 0x16b6 <init_serial_stdio+0x5c>
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	a1 1d       	adc	r26, r1
    16b4:	b1 1d       	adc	r27, r1
    16b6:	b5 95       	asr	r27
    16b8:	a7 95       	ror	r26
    16ba:	97 95       	ror	r25
    16bc:	87 95       	ror	r24
    16be:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    16c0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    16c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    16c8:	e1 ec       	ldi	r30, 0xC1	; 193
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	88 e1       	ldi	r24, 0x18	; 24
    16ce:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    16d0:	80 81       	ld	r24, Z
    16d2:	80 68       	ori	r24, 0x80	; 128
    16d4:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    16d6:	eb e8       	ldi	r30, 0x8B	; 139
    16d8:	f4 e0       	ldi	r31, 0x04	; 4
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	93 83       	std	Z+3, r25	; 0x03
    16e0:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
    16e6:	08 95       	ret

000016e8 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    16e8:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <bytes_in_input_buffer>
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	91 11       	cpse	r25, r1
    16f0:	01 c0       	rjmp	.+2      	; 0x16f4 <serial_input_available+0xc>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
}
    16f4:	08 95       	ret

000016f6 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    16f6:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <input_insert_pos>
	bytes_in_input_buffer = 0;
    16fa:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <bytes_in_input_buffer>
    16fe:	08 95       	ret

00001700 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	2f 93       	push	r18
    170c:	8f 93       	push	r24
    170e:	9f 93       	push	r25
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1714:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <bytes_in_out_buffer>
    1718:	88 23       	and	r24, r24
    171a:	29 f1       	breq	.+74     	; 0x1766 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    171c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <out_insert_pos>
    1720:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <bytes_in_out_buffer>
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	82 1b       	sub	r24, r18
    1728:	91 09       	sbc	r25, r1
    172a:	5a f4       	brpl	.+22     	; 0x1742 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    172c:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <out_insert_pos>
    1730:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <bytes_in_out_buffer>
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	e8 1b       	sub	r30, r24
    1738:	f1 09       	sbc	r31, r1
    173a:	e8 58       	subi	r30, 0x88	; 136
    173c:	fb 4f       	sbci	r31, 0xFB	; 251
    173e:	90 81       	ld	r25, Z
    1740:	0a c0       	rjmp	.+20     	; 0x1756 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1742:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <out_insert_pos>
    1746:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <bytes_in_out_buffer>
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	e8 1b       	sub	r30, r24
    174e:	f1 09       	sbc	r31, r1
    1750:	e7 58       	subi	r30, 0x87	; 135
    1752:	fc 4f       	sbci	r31, 0xFC	; 252
    1754:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1756:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <bytes_in_out_buffer>
    175a:	81 50       	subi	r24, 0x01	; 1
    175c:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1760:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1764:	05 c0       	rjmp	.+10     	; 0x1770 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1766:	e1 ec       	ldi	r30, 0xC1	; 193
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8f 7d       	andi	r24, 0xDF	; 223
    176e:	80 83       	st	Z, r24
	}
}
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	2f 91       	pop	r18
    177a:	0f 90       	pop	r0
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	0f 90       	pop	r0
    1780:	1f 90       	pop	r1
    1782:	18 95       	reti

00001784 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1784:	1f 92       	push	r1
    1786:	0f 92       	push	r0
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	0f 92       	push	r0
    178c:	11 24       	eor	r1, r1
    178e:	2f 93       	push	r18
    1790:	3f 93       	push	r19
    1792:	4f 93       	push	r20
    1794:	5f 93       	push	r21
    1796:	6f 93       	push	r22
    1798:	7f 93       	push	r23
    179a:	8f 93       	push	r24
    179c:	9f 93       	push	r25
    179e:	af 93       	push	r26
    17a0:	bf 93       	push	r27
    17a2:	cf 93       	push	r28
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    17a8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    17ac:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <do_echo>
    17b0:	88 23       	and	r24, r24
    17b2:	49 f0       	breq	.+18     	; 0x17c6 <__vector_20+0x42>
    17b4:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <bytes_in_out_buffer>
    17b8:	8f 3f       	cpi	r24, 0xFF	; 255
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	8c 2f       	mov	r24, r28
    17c2:	0e 94 c7 0a 	call	0x158e	; 0x158e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    17c6:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <bytes_in_input_buffer>
    17ca:	80 31       	cpi	r24, 0x10	; 16
    17cc:	20 f0       	brcs	.+8      	; 0x17d6 <__vector_20+0x52>
		input_overrun = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <input_overrun>
    17d4:	18 c0       	rjmp	.+48     	; 0x1806 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    17d6:	cd 30       	cpi	r28, 0x0D	; 13
    17d8:	09 f4       	brne	.+2      	; 0x17dc <__vector_20+0x58>
			c = '\n';
    17da:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    17dc:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <input_insert_pos>
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	8e 0f       	add	r24, r30
    17e4:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <input_insert_pos>
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	e7 58       	subi	r30, 0x87	; 135
    17ec:	fb 4f       	sbci	r31, 0xFB	; 251
    17ee:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    17f0:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <bytes_in_input_buffer>
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    17fa:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <input_insert_pos>
    17fe:	80 31       	cpi	r24, 0x10	; 16
    1800:	11 f4       	brne	.+4      	; 0x1806 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1802:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <input_insert_pos>
		}
	}
}
    1806:	ff 91       	pop	r31
    1808:	ef 91       	pop	r30
    180a:	cf 91       	pop	r28
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    182a:	94 b1       	in	r25, 0x04	; 4
    182c:	90 6b       	ori	r25, 0xB0	; 176
    182e:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1830:	95 b1       	in	r25, 0x05	; 5
    1832:	90 61       	ori	r25, 0x10	; 16
    1834:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1836:	90 e5       	ldi	r25, 0x50	; 80
    1838:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    183a:	88 30       	cpi	r24, 0x08	; 8
    183c:	21 f0       	breq	.+8      	; 0x1846 <spi_setup_master+0x1c>
    183e:	80 32       	cpi	r24, 0x20	; 32
    1840:	11 f0       	breq	.+4      	; 0x1846 <spi_setup_master+0x1c>
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	19 f4       	brne	.+6      	; 0x184c <spi_setup_master+0x22>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	9d bd       	out	0x2d, r25	; 45
			break;
    184a:	01 c0       	rjmp	.+2      	; 0x184e <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    184c:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    184e:	80 32       	cpi	r24, 0x20	; 32
    1850:	69 f0       	breq	.+26     	; 0x186c <spi_setup_master+0x42>
    1852:	28 f4       	brcc	.+10     	; 0x185e <spi_setup_master+0x34>
    1854:	88 30       	cpi	r24, 0x08	; 8
    1856:	71 f0       	breq	.+28     	; 0x1874 <spi_setup_master+0x4a>
    1858:	80 31       	cpi	r24, 0x10	; 16
    185a:	61 f0       	breq	.+24     	; 0x1874 <spi_setup_master+0x4a>
    185c:	0e c0       	rjmp	.+28     	; 0x187a <spi_setup_master+0x50>
    185e:	80 34       	cpi	r24, 0x40	; 64
    1860:	29 f0       	breq	.+10     	; 0x186c <spi_setup_master+0x42>
    1862:	80 38       	cpi	r24, 0x80	; 128
    1864:	51 f4       	brne	.+20     	; 0x187a <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1<<SPR00);
    1866:	8c b5       	in	r24, 0x2c	; 44
    1868:	81 60       	ori	r24, 0x01	; 1
    186a:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    186c:	8c b5       	in	r24, 0x2c	; 44
    186e:	82 60       	ori	r24, 0x02	; 2
    1870:	8c bd       	out	0x2c, r24	; 44
			break;
    1872:	03 c0       	rjmp	.+6      	; 0x187a <spi_setup_master+0x50>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1874:	8c b5       	in	r24, 0x2c	; 44
    1876:	81 60       	ori	r24, 0x01	; 1
    1878:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    187a:	85 b1       	in	r24, 0x05	; 5
    187c:	8f 7e       	andi	r24, 0xEF	; 239
    187e:	85 b9       	out	0x05, r24	; 5
    1880:	08 95       	ret

00001882 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1882:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1884:	0d b4       	in	r0, 0x2d	; 45
    1886:	07 fe       	sbrs	r0, 7
    1888:	fd cf       	rjmp	.-6      	; 0x1884 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    188a:	8e b5       	in	r24, 0x2e	; 46
    188c:	08 95       	ret

0000188e <move_terminal_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    188e:	9f 93       	push	r25
    1890:	8f 93       	push	r24
    1892:	7f 93       	push	r23
    1894:	6f 93       	push	r22
    1896:	8a ef       	ldi	r24, 0xFA	; 250
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9f 93       	push	r25
    189c:	8f 93       	push	r24
    189e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <printf_P>
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	08 95       	ret

000018b0 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    18b0:	85 ef       	ldi	r24, 0xF5	; 245
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9f 93       	push	r25
    18b6:	8f 93       	push	r24
    18b8:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <printf_P>
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	08 95       	ret

000018c2 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    18c2:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <clockTicks>
    18c6:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <clockTicks+0x1>
    18ca:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <clockTicks+0x2>
    18ce:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    18d2:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    18d4:	8c e7       	ldi	r24, 0x7C	; 124
    18d6:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    18e0:	ee e6       	ldi	r30, 0x6E	; 110
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	82 60       	ori	r24, 0x02	; 2
    18e8:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    18ea:	85 b3       	in	r24, 0x15	; 21
    18ec:	82 70       	andi	r24, 0x02	; 2
    18ee:	85 bb       	out	0x15, r24	; 21
    18f0:	08 95       	ret

000018f2 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    18f2:	8f b7       	in	r24, 0x3f	; 63
    18f4:	28 2f       	mov	r18, r24
    18f6:	20 78       	andi	r18, 0x80	; 128
	cli();
    18f8:	f8 94       	cli
	returnValue = clockTicks;
    18fa:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <clockTicks>
    18fe:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <clockTicks+0x1>
    1902:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <clockTicks+0x2>
    1906:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <clockTicks+0x3>
	if(interruptsOn) {
    190a:	22 23       	and	r18, r18
    190c:	09 f0       	breq	.+2      	; 0x1910 <get_current_time+0x1e>
		sei();
    190e:	78 94       	sei
	}
	return returnValue;
}
    1910:	08 95       	ret

00001912 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    1912:	1f 92       	push	r1
    1914:	0f 92       	push	r0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	0f 92       	push	r0
    191a:	11 24       	eor	r1, r1
    191c:	2f 93       	push	r18
    191e:	3f 93       	push	r19
    1920:	4f 93       	push	r20
    1922:	5f 93       	push	r21
    1924:	6f 93       	push	r22
    1926:	7f 93       	push	r23
    1928:	8f 93       	push	r24
    192a:	9f 93       	push	r25
    192c:	af 93       	push	r26
    192e:	bf 93       	push	r27
    1930:	ef 93       	push	r30
    1932:	ff 93       	push	r31
	/* Increment our clock tick count */
	if (get_paused() == 0) {
    1934:	0e 94 c5 03 	call	0x78a	; 0x78a <get_paused>
    1938:	81 11       	cpse	r24, r1
    193a:	13 c0       	rjmp	.+38     	; 0x1962 <__vector_16+0x50>
		clockTicks++;
    193c:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <clockTicks>
    1940:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <clockTicks+0x1>
    1944:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <clockTicks+0x2>
    1948:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <clockTicks+0x3>
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	a1 1d       	adc	r26, r1
    1950:	b1 1d       	adc	r27, r1
    1952:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <clockTicks>
    1956:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <clockTicks+0x1>
    195a:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <clockTicks+0x2>
    195e:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <clockTicks+0x3>
	}
    1962:	ff 91       	pop	r31
    1964:	ef 91       	pop	r30
    1966:	bf 91       	pop	r27
    1968:	af 91       	pop	r26
    196a:	9f 91       	pop	r25
    196c:	8f 91       	pop	r24
    196e:	7f 91       	pop	r23
    1970:	6f 91       	pop	r22
    1972:	5f 91       	pop	r21
    1974:	4f 91       	pop	r20
    1976:	3f 91       	pop	r19
    1978:	2f 91       	pop	r18
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	0f 90       	pop	r0
    1980:	1f 90       	pop	r1
    1982:	18 95       	reti

00001984 <__subsf3>:
    1984:	50 58       	subi	r21, 0x80	; 128

00001986 <__addsf3>:
    1986:	bb 27       	eor	r27, r27
    1988:	aa 27       	eor	r26, r26
    198a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__addsf3x>
    198e:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__fp_round>
    1992:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fp_pscA>
    1996:	38 f0       	brcs	.+14     	; 0x19a6 <__addsf3+0x20>
    1998:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__fp_pscB>
    199c:	20 f0       	brcs	.+8      	; 0x19a6 <__addsf3+0x20>
    199e:	39 f4       	brne	.+14     	; 0x19ae <__addsf3+0x28>
    19a0:	9f 3f       	cpi	r25, 0xFF	; 255
    19a2:	19 f4       	brne	.+6      	; 0x19aa <__addsf3+0x24>
    19a4:	26 f4       	brtc	.+8      	; 0x19ae <__addsf3+0x28>
    19a6:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__fp_nan>
    19aa:	0e f4       	brtc	.+2      	; 0x19ae <__addsf3+0x28>
    19ac:	e0 95       	com	r30
    19ae:	e7 fb       	bst	r30, 7
    19b0:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__fp_inf>

000019b4 <__addsf3x>:
    19b4:	e9 2f       	mov	r30, r25
    19b6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__fp_split3>
    19ba:	58 f3       	brcs	.-42     	; 0x1992 <__addsf3+0xc>
    19bc:	ba 17       	cp	r27, r26
    19be:	62 07       	cpc	r22, r18
    19c0:	73 07       	cpc	r23, r19
    19c2:	84 07       	cpc	r24, r20
    19c4:	95 07       	cpc	r25, r21
    19c6:	20 f0       	brcs	.+8      	; 0x19d0 <__addsf3x+0x1c>
    19c8:	79 f4       	brne	.+30     	; 0x19e8 <__addsf3x+0x34>
    19ca:	a6 f5       	brtc	.+104    	; 0x1a34 <__addsf3x+0x80>
    19cc:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__fp_zero>
    19d0:	0e f4       	brtc	.+2      	; 0x19d4 <__addsf3x+0x20>
    19d2:	e0 95       	com	r30
    19d4:	0b 2e       	mov	r0, r27
    19d6:	ba 2f       	mov	r27, r26
    19d8:	a0 2d       	mov	r26, r0
    19da:	0b 01       	movw	r0, r22
    19dc:	b9 01       	movw	r22, r18
    19de:	90 01       	movw	r18, r0
    19e0:	0c 01       	movw	r0, r24
    19e2:	ca 01       	movw	r24, r20
    19e4:	a0 01       	movw	r20, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	ff 27       	eor	r31, r31
    19ea:	59 1b       	sub	r21, r25
    19ec:	99 f0       	breq	.+38     	; 0x1a14 <__addsf3x+0x60>
    19ee:	59 3f       	cpi	r21, 0xF9	; 249
    19f0:	50 f4       	brcc	.+20     	; 0x1a06 <__addsf3x+0x52>
    19f2:	50 3e       	cpi	r21, 0xE0	; 224
    19f4:	68 f1       	brcs	.+90     	; 0x1a50 <__addsf3x+0x9c>
    19f6:	1a 16       	cp	r1, r26
    19f8:	f0 40       	sbci	r31, 0x00	; 0
    19fa:	a2 2f       	mov	r26, r18
    19fc:	23 2f       	mov	r18, r19
    19fe:	34 2f       	mov	r19, r20
    1a00:	44 27       	eor	r20, r20
    1a02:	58 5f       	subi	r21, 0xF8	; 248
    1a04:	f3 cf       	rjmp	.-26     	; 0x19ec <__addsf3x+0x38>
    1a06:	46 95       	lsr	r20
    1a08:	37 95       	ror	r19
    1a0a:	27 95       	ror	r18
    1a0c:	a7 95       	ror	r26
    1a0e:	f0 40       	sbci	r31, 0x00	; 0
    1a10:	53 95       	inc	r21
    1a12:	c9 f7       	brne	.-14     	; 0x1a06 <__addsf3x+0x52>
    1a14:	7e f4       	brtc	.+30     	; 0x1a34 <__addsf3x+0x80>
    1a16:	1f 16       	cp	r1, r31
    1a18:	ba 0b       	sbc	r27, r26
    1a1a:	62 0b       	sbc	r22, r18
    1a1c:	73 0b       	sbc	r23, r19
    1a1e:	84 0b       	sbc	r24, r20
    1a20:	ba f0       	brmi	.+46     	; 0x1a50 <__addsf3x+0x9c>
    1a22:	91 50       	subi	r25, 0x01	; 1
    1a24:	a1 f0       	breq	.+40     	; 0x1a4e <__addsf3x+0x9a>
    1a26:	ff 0f       	add	r31, r31
    1a28:	bb 1f       	adc	r27, r27
    1a2a:	66 1f       	adc	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	88 1f       	adc	r24, r24
    1a30:	c2 f7       	brpl	.-16     	; 0x1a22 <__addsf3x+0x6e>
    1a32:	0e c0       	rjmp	.+28     	; 0x1a50 <__addsf3x+0x9c>
    1a34:	ba 0f       	add	r27, r26
    1a36:	62 1f       	adc	r22, r18
    1a38:	73 1f       	adc	r23, r19
    1a3a:	84 1f       	adc	r24, r20
    1a3c:	48 f4       	brcc	.+18     	; 0x1a50 <__addsf3x+0x9c>
    1a3e:	87 95       	ror	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	b7 95       	ror	r27
    1a46:	f7 95       	ror	r31
    1a48:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <__addsf3x+0x9a>
    1a4c:	b0 cf       	rjmp	.-160    	; 0x19ae <__addsf3+0x28>
    1a4e:	93 95       	inc	r25
    1a50:	88 0f       	add	r24, r24
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <__addsf3x+0xa2>
    1a54:	99 27       	eor	r25, r25
    1a56:	ee 0f       	add	r30, r30
    1a58:	97 95       	ror	r25
    1a5a:	87 95       	ror	r24
    1a5c:	08 95       	ret

00001a5e <__divsf3>:
    1a5e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__divsf3x>
    1a62:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__fp_round>
    1a66:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__fp_pscB>
    1a6a:	58 f0       	brcs	.+22     	; 0x1a82 <__divsf3+0x24>
    1a6c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fp_pscA>
    1a70:	40 f0       	brcs	.+16     	; 0x1a82 <__divsf3+0x24>
    1a72:	29 f4       	brne	.+10     	; 0x1a7e <__divsf3+0x20>
    1a74:	5f 3f       	cpi	r21, 0xFF	; 255
    1a76:	29 f0       	breq	.+10     	; 0x1a82 <__divsf3+0x24>
    1a78:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__fp_inf>
    1a7c:	51 11       	cpse	r21, r1
    1a7e:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_szero>
    1a82:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__fp_nan>

00001a86 <__divsf3x>:
    1a86:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__fp_split3>
    1a8a:	68 f3       	brcs	.-38     	; 0x1a66 <__divsf3+0x8>

00001a8c <__divsf3_pse>:
    1a8c:	99 23       	and	r25, r25
    1a8e:	b1 f3       	breq	.-20     	; 0x1a7c <__divsf3+0x1e>
    1a90:	55 23       	and	r21, r21
    1a92:	91 f3       	breq	.-28     	; 0x1a78 <__divsf3+0x1a>
    1a94:	95 1b       	sub	r25, r21
    1a96:	55 0b       	sbc	r21, r21
    1a98:	bb 27       	eor	r27, r27
    1a9a:	aa 27       	eor	r26, r26
    1a9c:	62 17       	cp	r22, r18
    1a9e:	73 07       	cpc	r23, r19
    1aa0:	84 07       	cpc	r24, r20
    1aa2:	38 f0       	brcs	.+14     	; 0x1ab2 <__divsf3_pse+0x26>
    1aa4:	9f 5f       	subi	r25, 0xFF	; 255
    1aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa8:	22 0f       	add	r18, r18
    1aaa:	33 1f       	adc	r19, r19
    1aac:	44 1f       	adc	r20, r20
    1aae:	aa 1f       	adc	r26, r26
    1ab0:	a9 f3       	breq	.-22     	; 0x1a9c <__divsf3_pse+0x10>
    1ab2:	35 d0       	rcall	.+106    	; 0x1b1e <__divsf3_pse+0x92>
    1ab4:	0e 2e       	mov	r0, r30
    1ab6:	3a f0       	brmi	.+14     	; 0x1ac6 <__divsf3_pse+0x3a>
    1ab8:	e0 e8       	ldi	r30, 0x80	; 128
    1aba:	32 d0       	rcall	.+100    	; 0x1b20 <__divsf3_pse+0x94>
    1abc:	91 50       	subi	r25, 0x01	; 1
    1abe:	50 40       	sbci	r21, 0x00	; 0
    1ac0:	e6 95       	lsr	r30
    1ac2:	00 1c       	adc	r0, r0
    1ac4:	ca f7       	brpl	.-14     	; 0x1ab8 <__divsf3_pse+0x2c>
    1ac6:	2b d0       	rcall	.+86     	; 0x1b1e <__divsf3_pse+0x92>
    1ac8:	fe 2f       	mov	r31, r30
    1aca:	29 d0       	rcall	.+82     	; 0x1b1e <__divsf3_pse+0x92>
    1acc:	66 0f       	add	r22, r22
    1ace:	77 1f       	adc	r23, r23
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	bb 1f       	adc	r27, r27
    1ad4:	26 17       	cp	r18, r22
    1ad6:	37 07       	cpc	r19, r23
    1ad8:	48 07       	cpc	r20, r24
    1ada:	ab 07       	cpc	r26, r27
    1adc:	b0 e8       	ldi	r27, 0x80	; 128
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <__divsf3_pse+0x56>
    1ae0:	bb 0b       	sbc	r27, r27
    1ae2:	80 2d       	mov	r24, r0
    1ae4:	bf 01       	movw	r22, r30
    1ae6:	ff 27       	eor	r31, r31
    1ae8:	93 58       	subi	r25, 0x83	; 131
    1aea:	5f 4f       	sbci	r21, 0xFF	; 255
    1aec:	3a f0       	brmi	.+14     	; 0x1afc <__divsf3_pse+0x70>
    1aee:	9e 3f       	cpi	r25, 0xFE	; 254
    1af0:	51 05       	cpc	r21, r1
    1af2:	78 f0       	brcs	.+30     	; 0x1b12 <__divsf3_pse+0x86>
    1af4:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__fp_inf>
    1af8:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_szero>
    1afc:	5f 3f       	cpi	r21, 0xFF	; 255
    1afe:	e4 f3       	brlt	.-8      	; 0x1af8 <__divsf3_pse+0x6c>
    1b00:	98 3e       	cpi	r25, 0xE8	; 232
    1b02:	d4 f3       	brlt	.-12     	; 0x1af8 <__divsf3_pse+0x6c>
    1b04:	86 95       	lsr	r24
    1b06:	77 95       	ror	r23
    1b08:	67 95       	ror	r22
    1b0a:	b7 95       	ror	r27
    1b0c:	f7 95       	ror	r31
    1b0e:	9f 5f       	subi	r25, 0xFF	; 255
    1b10:	c9 f7       	brne	.-14     	; 0x1b04 <__divsf3_pse+0x78>
    1b12:	88 0f       	add	r24, r24
    1b14:	91 1d       	adc	r25, r1
    1b16:	96 95       	lsr	r25
    1b18:	87 95       	ror	r24
    1b1a:	97 f9       	bld	r25, 7
    1b1c:	08 95       	ret
    1b1e:	e1 e0       	ldi	r30, 0x01	; 1
    1b20:	66 0f       	add	r22, r22
    1b22:	77 1f       	adc	r23, r23
    1b24:	88 1f       	adc	r24, r24
    1b26:	bb 1f       	adc	r27, r27
    1b28:	62 17       	cp	r22, r18
    1b2a:	73 07       	cpc	r23, r19
    1b2c:	84 07       	cpc	r24, r20
    1b2e:	ba 07       	cpc	r27, r26
    1b30:	20 f0       	brcs	.+8      	; 0x1b3a <__divsf3_pse+0xae>
    1b32:	62 1b       	sub	r22, r18
    1b34:	73 0b       	sbc	r23, r19
    1b36:	84 0b       	sbc	r24, r20
    1b38:	ba 0b       	sbc	r27, r26
    1b3a:	ee 1f       	adc	r30, r30
    1b3c:	88 f7       	brcc	.-30     	; 0x1b20 <__divsf3_pse+0x94>
    1b3e:	e0 95       	com	r30
    1b40:	08 95       	ret

00001b42 <__floatunsisf>:
    1b42:	e8 94       	clt
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <__floatsisf+0x12>

00001b46 <__floatsisf>:
    1b46:	97 fb       	bst	r25, 7
    1b48:	3e f4       	brtc	.+14     	; 0x1b58 <__floatsisf+0x12>
    1b4a:	90 95       	com	r25
    1b4c:	80 95       	com	r24
    1b4e:	70 95       	com	r23
    1b50:	61 95       	neg	r22
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	8f 4f       	sbci	r24, 0xFF	; 255
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	99 23       	and	r25, r25
    1b5a:	a9 f0       	breq	.+42     	; 0x1b86 <__floatsisf+0x40>
    1b5c:	f9 2f       	mov	r31, r25
    1b5e:	96 e9       	ldi	r25, 0x96	; 150
    1b60:	bb 27       	eor	r27, r27
    1b62:	93 95       	inc	r25
    1b64:	f6 95       	lsr	r31
    1b66:	87 95       	ror	r24
    1b68:	77 95       	ror	r23
    1b6a:	67 95       	ror	r22
    1b6c:	b7 95       	ror	r27
    1b6e:	f1 11       	cpse	r31, r1
    1b70:	f8 cf       	rjmp	.-16     	; 0x1b62 <__floatsisf+0x1c>
    1b72:	fa f4       	brpl	.+62     	; 0x1bb2 <__floatsisf+0x6c>
    1b74:	bb 0f       	add	r27, r27
    1b76:	11 f4       	brne	.+4      	; 0x1b7c <__floatsisf+0x36>
    1b78:	60 ff       	sbrs	r22, 0
    1b7a:	1b c0       	rjmp	.+54     	; 0x1bb2 <__floatsisf+0x6c>
    1b7c:	6f 5f       	subi	r22, 0xFF	; 255
    1b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b80:	8f 4f       	sbci	r24, 0xFF	; 255
    1b82:	9f 4f       	sbci	r25, 0xFF	; 255
    1b84:	16 c0       	rjmp	.+44     	; 0x1bb2 <__floatsisf+0x6c>
    1b86:	88 23       	and	r24, r24
    1b88:	11 f0       	breq	.+4      	; 0x1b8e <__floatsisf+0x48>
    1b8a:	96 e9       	ldi	r25, 0x96	; 150
    1b8c:	11 c0       	rjmp	.+34     	; 0x1bb0 <__floatsisf+0x6a>
    1b8e:	77 23       	and	r23, r23
    1b90:	21 f0       	breq	.+8      	; 0x1b9a <__floatsisf+0x54>
    1b92:	9e e8       	ldi	r25, 0x8E	; 142
    1b94:	87 2f       	mov	r24, r23
    1b96:	76 2f       	mov	r23, r22
    1b98:	05 c0       	rjmp	.+10     	; 0x1ba4 <__floatsisf+0x5e>
    1b9a:	66 23       	and	r22, r22
    1b9c:	71 f0       	breq	.+28     	; 0x1bba <__floatsisf+0x74>
    1b9e:	96 e8       	ldi	r25, 0x86	; 134
    1ba0:	86 2f       	mov	r24, r22
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	2a f0       	brmi	.+10     	; 0x1bb2 <__floatsisf+0x6c>
    1ba8:	9a 95       	dec	r25
    1baa:	66 0f       	add	r22, r22
    1bac:	77 1f       	adc	r23, r23
    1bae:	88 1f       	adc	r24, r24
    1bb0:	da f7       	brpl	.-10     	; 0x1ba8 <__floatsisf+0x62>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	96 95       	lsr	r25
    1bb6:	87 95       	ror	r24
    1bb8:	97 f9       	bld	r25, 7
    1bba:	08 95       	ret

00001bbc <__fp_inf>:
    1bbc:	97 f9       	bld	r25, 7
    1bbe:	9f 67       	ori	r25, 0x7F	; 127
    1bc0:	80 e8       	ldi	r24, 0x80	; 128
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	08 95       	ret

00001bc8 <__fp_nan>:
    1bc8:	9f ef       	ldi	r25, 0xFF	; 255
    1bca:	80 ec       	ldi	r24, 0xC0	; 192
    1bcc:	08 95       	ret

00001bce <__fp_pscA>:
    1bce:	00 24       	eor	r0, r0
    1bd0:	0a 94       	dec	r0
    1bd2:	16 16       	cp	r1, r22
    1bd4:	17 06       	cpc	r1, r23
    1bd6:	18 06       	cpc	r1, r24
    1bd8:	09 06       	cpc	r0, r25
    1bda:	08 95       	ret

00001bdc <__fp_pscB>:
    1bdc:	00 24       	eor	r0, r0
    1bde:	0a 94       	dec	r0
    1be0:	12 16       	cp	r1, r18
    1be2:	13 06       	cpc	r1, r19
    1be4:	14 06       	cpc	r1, r20
    1be6:	05 06       	cpc	r0, r21
    1be8:	08 95       	ret

00001bea <__fp_round>:
    1bea:	09 2e       	mov	r0, r25
    1bec:	03 94       	inc	r0
    1bee:	00 0c       	add	r0, r0
    1bf0:	11 f4       	brne	.+4      	; 0x1bf6 <__fp_round+0xc>
    1bf2:	88 23       	and	r24, r24
    1bf4:	52 f0       	brmi	.+20     	; 0x1c0a <__fp_round+0x20>
    1bf6:	bb 0f       	add	r27, r27
    1bf8:	40 f4       	brcc	.+16     	; 0x1c0a <__fp_round+0x20>
    1bfa:	bf 2b       	or	r27, r31
    1bfc:	11 f4       	brne	.+4      	; 0x1c02 <__fp_round+0x18>
    1bfe:	60 ff       	sbrs	r22, 0
    1c00:	04 c0       	rjmp	.+8      	; 0x1c0a <__fp_round+0x20>
    1c02:	6f 5f       	subi	r22, 0xFF	; 255
    1c04:	7f 4f       	sbci	r23, 0xFF	; 255
    1c06:	8f 4f       	sbci	r24, 0xFF	; 255
    1c08:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0a:	08 95       	ret

00001c0c <__fp_split3>:
    1c0c:	57 fd       	sbrc	r21, 7
    1c0e:	90 58       	subi	r25, 0x80	; 128
    1c10:	44 0f       	add	r20, r20
    1c12:	55 1f       	adc	r21, r21
    1c14:	59 f0       	breq	.+22     	; 0x1c2c <__fp_splitA+0x10>
    1c16:	5f 3f       	cpi	r21, 0xFF	; 255
    1c18:	71 f0       	breq	.+28     	; 0x1c36 <__fp_splitA+0x1a>
    1c1a:	47 95       	ror	r20

00001c1c <__fp_splitA>:
    1c1c:	88 0f       	add	r24, r24
    1c1e:	97 fb       	bst	r25, 7
    1c20:	99 1f       	adc	r25, r25
    1c22:	61 f0       	breq	.+24     	; 0x1c3c <__fp_splitA+0x20>
    1c24:	9f 3f       	cpi	r25, 0xFF	; 255
    1c26:	79 f0       	breq	.+30     	; 0x1c46 <__fp_splitA+0x2a>
    1c28:	87 95       	ror	r24
    1c2a:	08 95       	ret
    1c2c:	12 16       	cp	r1, r18
    1c2e:	13 06       	cpc	r1, r19
    1c30:	14 06       	cpc	r1, r20
    1c32:	55 1f       	adc	r21, r21
    1c34:	f2 cf       	rjmp	.-28     	; 0x1c1a <__fp_split3+0xe>
    1c36:	46 95       	lsr	r20
    1c38:	f1 df       	rcall	.-30     	; 0x1c1c <__fp_splitA>
    1c3a:	08 c0       	rjmp	.+16     	; 0x1c4c <__fp_splitA+0x30>
    1c3c:	16 16       	cp	r1, r22
    1c3e:	17 06       	cpc	r1, r23
    1c40:	18 06       	cpc	r1, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	f1 cf       	rjmp	.-30     	; 0x1c28 <__fp_splitA+0xc>
    1c46:	86 95       	lsr	r24
    1c48:	71 05       	cpc	r23, r1
    1c4a:	61 05       	cpc	r22, r1
    1c4c:	08 94       	sec
    1c4e:	08 95       	ret

00001c50 <__fp_zero>:
    1c50:	e8 94       	clt

00001c52 <__fp_szero>:
    1c52:	bb 27       	eor	r27, r27
    1c54:	66 27       	eor	r22, r22
    1c56:	77 27       	eor	r23, r23
    1c58:	cb 01       	movw	r24, r22
    1c5a:	97 f9       	bld	r25, 7
    1c5c:	08 95       	ret

00001c5e <__gesf2>:
    1c5e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_cmp>
    1c62:	08 f4       	brcc	.+2      	; 0x1c66 <__gesf2+0x8>
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	08 95       	ret

00001c68 <__mulsf3>:
    1c68:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__mulsf3x>
    1c6c:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__fp_round>
    1c70:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fp_pscA>
    1c74:	38 f0       	brcs	.+14     	; 0x1c84 <__mulsf3+0x1c>
    1c76:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__fp_pscB>
    1c7a:	20 f0       	brcs	.+8      	; 0x1c84 <__mulsf3+0x1c>
    1c7c:	95 23       	and	r25, r21
    1c7e:	11 f0       	breq	.+4      	; 0x1c84 <__mulsf3+0x1c>
    1c80:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__fp_inf>
    1c84:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__fp_nan>
    1c88:	11 24       	eor	r1, r1
    1c8a:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_szero>

00001c8e <__mulsf3x>:
    1c8e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__fp_split3>
    1c92:	70 f3       	brcs	.-36     	; 0x1c70 <__mulsf3+0x8>

00001c94 <__mulsf3_pse>:
    1c94:	95 9f       	mul	r25, r21
    1c96:	c1 f3       	breq	.-16     	; 0x1c88 <__mulsf3+0x20>
    1c98:	95 0f       	add	r25, r21
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	55 1f       	adc	r21, r21
    1c9e:	62 9f       	mul	r22, r18
    1ca0:	f0 01       	movw	r30, r0
    1ca2:	72 9f       	mul	r23, r18
    1ca4:	bb 27       	eor	r27, r27
    1ca6:	f0 0d       	add	r31, r0
    1ca8:	b1 1d       	adc	r27, r1
    1caa:	63 9f       	mul	r22, r19
    1cac:	aa 27       	eor	r26, r26
    1cae:	f0 0d       	add	r31, r0
    1cb0:	b1 1d       	adc	r27, r1
    1cb2:	aa 1f       	adc	r26, r26
    1cb4:	64 9f       	mul	r22, r20
    1cb6:	66 27       	eor	r22, r22
    1cb8:	b0 0d       	add	r27, r0
    1cba:	a1 1d       	adc	r26, r1
    1cbc:	66 1f       	adc	r22, r22
    1cbe:	82 9f       	mul	r24, r18
    1cc0:	22 27       	eor	r18, r18
    1cc2:	b0 0d       	add	r27, r0
    1cc4:	a1 1d       	adc	r26, r1
    1cc6:	62 1f       	adc	r22, r18
    1cc8:	73 9f       	mul	r23, r19
    1cca:	b0 0d       	add	r27, r0
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	62 1f       	adc	r22, r18
    1cd0:	83 9f       	mul	r24, r19
    1cd2:	a0 0d       	add	r26, r0
    1cd4:	61 1d       	adc	r22, r1
    1cd6:	22 1f       	adc	r18, r18
    1cd8:	74 9f       	mul	r23, r20
    1cda:	33 27       	eor	r19, r19
    1cdc:	a0 0d       	add	r26, r0
    1cde:	61 1d       	adc	r22, r1
    1ce0:	23 1f       	adc	r18, r19
    1ce2:	84 9f       	mul	r24, r20
    1ce4:	60 0d       	add	r22, r0
    1ce6:	21 1d       	adc	r18, r1
    1ce8:	82 2f       	mov	r24, r18
    1cea:	76 2f       	mov	r23, r22
    1cec:	6a 2f       	mov	r22, r26
    1cee:	11 24       	eor	r1, r1
    1cf0:	9f 57       	subi	r25, 0x7F	; 127
    1cf2:	50 40       	sbci	r21, 0x00	; 0
    1cf4:	9a f0       	brmi	.+38     	; 0x1d1c <__mulsf3_pse+0x88>
    1cf6:	f1 f0       	breq	.+60     	; 0x1d34 <__mulsf3_pse+0xa0>
    1cf8:	88 23       	and	r24, r24
    1cfa:	4a f0       	brmi	.+18     	; 0x1d0e <__mulsf3_pse+0x7a>
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	ff 1f       	adc	r31, r31
    1d00:	bb 1f       	adc	r27, r27
    1d02:	66 1f       	adc	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	88 1f       	adc	r24, r24
    1d08:	91 50       	subi	r25, 0x01	; 1
    1d0a:	50 40       	sbci	r21, 0x00	; 0
    1d0c:	a9 f7       	brne	.-22     	; 0x1cf8 <__mulsf3_pse+0x64>
    1d0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d10:	51 05       	cpc	r21, r1
    1d12:	80 f0       	brcs	.+32     	; 0x1d34 <__mulsf3_pse+0xa0>
    1d14:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__fp_inf>
    1d18:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_szero>
    1d1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d1e:	e4 f3       	brlt	.-8      	; 0x1d18 <__mulsf3_pse+0x84>
    1d20:	98 3e       	cpi	r25, 0xE8	; 232
    1d22:	d4 f3       	brlt	.-12     	; 0x1d18 <__mulsf3_pse+0x84>
    1d24:	86 95       	lsr	r24
    1d26:	77 95       	ror	r23
    1d28:	67 95       	ror	r22
    1d2a:	b7 95       	ror	r27
    1d2c:	f7 95       	ror	r31
    1d2e:	e7 95       	ror	r30
    1d30:	9f 5f       	subi	r25, 0xFF	; 255
    1d32:	c1 f7       	brne	.-16     	; 0x1d24 <__mulsf3_pse+0x90>
    1d34:	fe 2b       	or	r31, r30
    1d36:	88 0f       	add	r24, r24
    1d38:	91 1d       	adc	r25, r1
    1d3a:	96 95       	lsr	r25
    1d3c:	87 95       	ror	r24
    1d3e:	97 f9       	bld	r25, 7
    1d40:	08 95       	ret

00001d42 <__fp_cmp>:
    1d42:	99 0f       	add	r25, r25
    1d44:	00 08       	sbc	r0, r0
    1d46:	55 0f       	add	r21, r21
    1d48:	aa 0b       	sbc	r26, r26
    1d4a:	e0 e8       	ldi	r30, 0x80	; 128
    1d4c:	fe ef       	ldi	r31, 0xFE	; 254
    1d4e:	16 16       	cp	r1, r22
    1d50:	17 06       	cpc	r1, r23
    1d52:	e8 07       	cpc	r30, r24
    1d54:	f9 07       	cpc	r31, r25
    1d56:	c0 f0       	brcs	.+48     	; 0x1d88 <__fp_cmp+0x46>
    1d58:	12 16       	cp	r1, r18
    1d5a:	13 06       	cpc	r1, r19
    1d5c:	e4 07       	cpc	r30, r20
    1d5e:	f5 07       	cpc	r31, r21
    1d60:	98 f0       	brcs	.+38     	; 0x1d88 <__fp_cmp+0x46>
    1d62:	62 1b       	sub	r22, r18
    1d64:	73 0b       	sbc	r23, r19
    1d66:	84 0b       	sbc	r24, r20
    1d68:	95 0b       	sbc	r25, r21
    1d6a:	39 f4       	brne	.+14     	; 0x1d7a <__fp_cmp+0x38>
    1d6c:	0a 26       	eor	r0, r26
    1d6e:	61 f0       	breq	.+24     	; 0x1d88 <__fp_cmp+0x46>
    1d70:	23 2b       	or	r18, r19
    1d72:	24 2b       	or	r18, r20
    1d74:	25 2b       	or	r18, r21
    1d76:	21 f4       	brne	.+8      	; 0x1d80 <__fp_cmp+0x3e>
    1d78:	08 95       	ret
    1d7a:	0a 26       	eor	r0, r26
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <__fp_cmp+0x3e>
    1d7e:	a1 40       	sbci	r26, 0x01	; 1
    1d80:	a6 95       	lsr	r26
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	81 1d       	adc	r24, r1
    1d86:	81 1d       	adc	r24, r1
    1d88:	08 95       	ret

00001d8a <__divmodsi4>:
    1d8a:	05 2e       	mov	r0, r21
    1d8c:	97 fb       	bst	r25, 7
    1d8e:	1e f4       	brtc	.+6      	; 0x1d96 <__divmodsi4+0xc>
    1d90:	00 94       	com	r0
    1d92:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__negsi2>
    1d96:	57 fd       	sbrc	r21, 7
    1d98:	07 d0       	rcall	.+14     	; 0x1da8 <__divmodsi4_neg2>
    1d9a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__udivmodsi4>
    1d9e:	07 fc       	sbrc	r0, 7
    1da0:	03 d0       	rcall	.+6      	; 0x1da8 <__divmodsi4_neg2>
    1da2:	4e f4       	brtc	.+18     	; 0x1db6 <__divmodsi4_exit>
    1da4:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__negsi2>

00001da8 <__divmodsi4_neg2>:
    1da8:	50 95       	com	r21
    1daa:	40 95       	com	r20
    1dac:	30 95       	com	r19
    1dae:	21 95       	neg	r18
    1db0:	3f 4f       	sbci	r19, 0xFF	; 255
    1db2:	4f 4f       	sbci	r20, 0xFF	; 255
    1db4:	5f 4f       	sbci	r21, 0xFF	; 255

00001db6 <__divmodsi4_exit>:
    1db6:	08 95       	ret

00001db8 <__negsi2>:
    1db8:	90 95       	com	r25
    1dba:	80 95       	com	r24
    1dbc:	70 95       	com	r23
    1dbe:	61 95       	neg	r22
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	08 95       	ret

00001dc8 <__udivmodsi4>:
    1dc8:	a1 e2       	ldi	r26, 0x21	; 33
    1dca:	1a 2e       	mov	r1, r26
    1dcc:	aa 1b       	sub	r26, r26
    1dce:	bb 1b       	sub	r27, r27
    1dd0:	fd 01       	movw	r30, r26
    1dd2:	0d c0       	rjmp	.+26     	; 0x1dee <__udivmodsi4_ep>

00001dd4 <__udivmodsi4_loop>:
    1dd4:	aa 1f       	adc	r26, r26
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	ee 1f       	adc	r30, r30
    1dda:	ff 1f       	adc	r31, r31
    1ddc:	a2 17       	cp	r26, r18
    1dde:	b3 07       	cpc	r27, r19
    1de0:	e4 07       	cpc	r30, r20
    1de2:	f5 07       	cpc	r31, r21
    1de4:	20 f0       	brcs	.+8      	; 0x1dee <__udivmodsi4_ep>
    1de6:	a2 1b       	sub	r26, r18
    1de8:	b3 0b       	sbc	r27, r19
    1dea:	e4 0b       	sbc	r30, r20
    1dec:	f5 0b       	sbc	r31, r21

00001dee <__udivmodsi4_ep>:
    1dee:	66 1f       	adc	r22, r22
    1df0:	77 1f       	adc	r23, r23
    1df2:	88 1f       	adc	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	1a 94       	dec	r1
    1df8:	69 f7       	brne	.-38     	; 0x1dd4 <__udivmodsi4_loop>
    1dfa:	60 95       	com	r22
    1dfc:	70 95       	com	r23
    1dfe:	80 95       	com	r24
    1e00:	90 95       	com	r25
    1e02:	9b 01       	movw	r18, r22
    1e04:	ac 01       	movw	r20, r24
    1e06:	bd 01       	movw	r22, r26
    1e08:	cf 01       	movw	r24, r30
    1e0a:	08 95       	ret

00001e0c <fgetc>:
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	ec 01       	movw	r28, r24
    1e12:	2b 81       	ldd	r18, Y+3	; 0x03
    1e14:	20 ff       	sbrs	r18, 0
    1e16:	33 c0       	rjmp	.+102    	; 0x1e7e <fgetc+0x72>
    1e18:	26 ff       	sbrs	r18, 6
    1e1a:	0a c0       	rjmp	.+20     	; 0x1e30 <fgetc+0x24>
    1e1c:	2f 7b       	andi	r18, 0xBF	; 191
    1e1e:	2b 83       	std	Y+3, r18	; 0x03
    1e20:	8e 81       	ldd	r24, Y+6	; 0x06
    1e22:	9f 81       	ldd	r25, Y+7	; 0x07
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	9f 83       	std	Y+7, r25	; 0x07
    1e28:	8e 83       	std	Y+6, r24	; 0x06
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	29 c0       	rjmp	.+82     	; 0x1e82 <fgetc+0x76>
    1e30:	22 ff       	sbrs	r18, 2
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <fgetc+0x46>
    1e34:	e8 81       	ld	r30, Y
    1e36:	f9 81       	ldd	r31, Y+1	; 0x01
    1e38:	80 81       	ld	r24, Z
    1e3a:	08 2e       	mov	r0, r24
    1e3c:	00 0c       	add	r0, r0
    1e3e:	99 0b       	sbc	r25, r25
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <fgetc+0x3e>
    1e44:	20 62       	ori	r18, 0x20	; 32
    1e46:	2b 83       	std	Y+3, r18	; 0x03
    1e48:	1a c0       	rjmp	.+52     	; 0x1e7e <fgetc+0x72>
    1e4a:	31 96       	adiw	r30, 0x01	; 1
    1e4c:	f9 83       	std	Y+1, r31	; 0x01
    1e4e:	e8 83       	st	Y, r30
    1e50:	0e c0       	rjmp	.+28     	; 0x1e6e <fgetc+0x62>
    1e52:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e54:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e56:	09 95       	icall
    1e58:	97 ff       	sbrs	r25, 7
    1e5a:	09 c0       	rjmp	.+18     	; 0x1e6e <fgetc+0x62>
    1e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	11 f0       	breq	.+4      	; 0x1e66 <fgetc+0x5a>
    1e62:	80 e2       	ldi	r24, 0x20	; 32
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <fgetc+0x5c>
    1e66:	80 e1       	ldi	r24, 0x10	; 16
    1e68:	82 2b       	or	r24, r18
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
    1e6c:	08 c0       	rjmp	.+16     	; 0x1e7e <fgetc+0x72>
    1e6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e70:	3f 81       	ldd	r19, Y+7	; 0x07
    1e72:	2f 5f       	subi	r18, 0xFF	; 255
    1e74:	3f 4f       	sbci	r19, 0xFF	; 255
    1e76:	3f 83       	std	Y+7, r19	; 0x07
    1e78:	2e 83       	std	Y+6, r18	; 0x06
    1e7a:	99 27       	eor	r25, r25
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <fgetc+0x76>
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	9f ef       	ldi	r25, 0xFF	; 255
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	08 95       	ret

00001e88 <printf>:
    1e88:	a0 e0       	ldi	r26, 0x00	; 0
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	ea e4       	ldi	r30, 0x4A	; 74
    1e8e:	ff e0       	ldi	r31, 0x0F	; 15
    1e90:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__+0x20>
    1e94:	ae 01       	movw	r20, r28
    1e96:	4b 5f       	subi	r20, 0xFB	; 251
    1e98:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9a:	fa 01       	movw	r30, r20
    1e9c:	61 91       	ld	r22, Z+
    1e9e:	71 91       	ld	r23, Z+
    1ea0:	af 01       	movw	r20, r30
    1ea2:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <__iob+0x2>
    1ea6:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <__iob+0x3>
    1eaa:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <vfprintf>
    1eae:	e2 e0       	ldi	r30, 0x02	; 2
    1eb0:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__+0x20>

00001eb4 <printf_P>:
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e0 e6       	ldi	r30, 0x60	; 96
    1eba:	ff e0       	ldi	r31, 0x0F	; 15
    1ebc:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__+0x1c>
    1ec0:	ae 01       	movw	r20, r28
    1ec2:	49 5f       	subi	r20, 0xF9	; 249
    1ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec6:	da 01       	movw	r26, r20
    1ec8:	6d 91       	ld	r22, X+
    1eca:	7d 91       	ld	r23, X+
    1ecc:	ad 01       	movw	r20, r26
    1ece:	0b e8       	ldi	r16, 0x8B	; 139
    1ed0:	14 e0       	ldi	r17, 0x04	; 4
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	dc 01       	movw	r26, r24
    1eda:	13 96       	adiw	r26, 0x03	; 3
    1edc:	2c 91       	ld	r18, X
    1ede:	13 97       	sbiw	r26, 0x03	; 3
    1ee0:	28 60       	ori	r18, 0x08	; 8
    1ee2:	13 96       	adiw	r26, 0x03	; 3
    1ee4:	2c 93       	st	X, r18
    1ee6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <vfprintf>
    1eea:	d8 01       	movw	r26, r16
    1eec:	12 96       	adiw	r26, 0x02	; 2
    1eee:	ed 91       	ld	r30, X+
    1ef0:	fc 91       	ld	r31, X
    1ef2:	13 97       	sbiw	r26, 0x03	; 3
    1ef4:	23 81       	ldd	r18, Z+3	; 0x03
    1ef6:	27 7f       	andi	r18, 0xF7	; 247
    1ef8:	23 83       	std	Z+3, r18	; 0x03
    1efa:	e4 e0       	ldi	r30, 0x04	; 4
    1efc:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__+0x1c>

00001f00 <vfprintf>:
    1f00:	ab e0       	ldi	r26, 0x0B	; 11
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e6 e8       	ldi	r30, 0x86	; 134
    1f06:	ff e0       	ldi	r31, 0x0F	; 15
    1f08:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__>
    1f0c:	6c 01       	movw	r12, r24
    1f0e:	7b 01       	movw	r14, r22
    1f10:	8a 01       	movw	r16, r20
    1f12:	fc 01       	movw	r30, r24
    1f14:	17 82       	std	Z+7, r1	; 0x07
    1f16:	16 82       	std	Z+6, r1	; 0x06
    1f18:	83 81       	ldd	r24, Z+3	; 0x03
    1f1a:	81 ff       	sbrs	r24, 1
    1f1c:	cc c1       	rjmp	.+920    	; 0x22b6 <vfprintf+0x3b6>
    1f1e:	ce 01       	movw	r24, r28
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	3c 01       	movw	r6, r24
    1f24:	f6 01       	movw	r30, r12
    1f26:	93 81       	ldd	r25, Z+3	; 0x03
    1f28:	f7 01       	movw	r30, r14
    1f2a:	93 fd       	sbrc	r25, 3
    1f2c:	85 91       	lpm	r24, Z+
    1f2e:	93 ff       	sbrs	r25, 3
    1f30:	81 91       	ld	r24, Z+
    1f32:	7f 01       	movw	r14, r30
    1f34:	88 23       	and	r24, r24
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <vfprintf+0x3a>
    1f38:	ba c1       	rjmp	.+884    	; 0x22ae <vfprintf+0x3ae>
    1f3a:	85 32       	cpi	r24, 0x25	; 37
    1f3c:	39 f4       	brne	.+14     	; 0x1f4c <vfprintf+0x4c>
    1f3e:	93 fd       	sbrc	r25, 3
    1f40:	85 91       	lpm	r24, Z+
    1f42:	93 ff       	sbrs	r25, 3
    1f44:	81 91       	ld	r24, Z+
    1f46:	7f 01       	movw	r14, r30
    1f48:	85 32       	cpi	r24, 0x25	; 37
    1f4a:	29 f4       	brne	.+10     	; 0x1f56 <vfprintf+0x56>
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0e 94 77 11 	call	0x22ee	; 0x22ee <fputc>
    1f54:	e7 cf       	rjmp	.-50     	; 0x1f24 <vfprintf+0x24>
    1f56:	91 2c       	mov	r9, r1
    1f58:	21 2c       	mov	r2, r1
    1f5a:	31 2c       	mov	r3, r1
    1f5c:	ff e1       	ldi	r31, 0x1F	; 31
    1f5e:	f3 15       	cp	r31, r3
    1f60:	d8 f0       	brcs	.+54     	; 0x1f98 <vfprintf+0x98>
    1f62:	8b 32       	cpi	r24, 0x2B	; 43
    1f64:	79 f0       	breq	.+30     	; 0x1f84 <vfprintf+0x84>
    1f66:	38 f4       	brcc	.+14     	; 0x1f76 <vfprintf+0x76>
    1f68:	80 32       	cpi	r24, 0x20	; 32
    1f6a:	79 f0       	breq	.+30     	; 0x1f8a <vfprintf+0x8a>
    1f6c:	83 32       	cpi	r24, 0x23	; 35
    1f6e:	a1 f4       	brne	.+40     	; 0x1f98 <vfprintf+0x98>
    1f70:	23 2d       	mov	r18, r3
    1f72:	20 61       	ori	r18, 0x10	; 16
    1f74:	1d c0       	rjmp	.+58     	; 0x1fb0 <vfprintf+0xb0>
    1f76:	8d 32       	cpi	r24, 0x2D	; 45
    1f78:	61 f0       	breq	.+24     	; 0x1f92 <vfprintf+0x92>
    1f7a:	80 33       	cpi	r24, 0x30	; 48
    1f7c:	69 f4       	brne	.+26     	; 0x1f98 <vfprintf+0x98>
    1f7e:	23 2d       	mov	r18, r3
    1f80:	21 60       	ori	r18, 0x01	; 1
    1f82:	16 c0       	rjmp	.+44     	; 0x1fb0 <vfprintf+0xb0>
    1f84:	83 2d       	mov	r24, r3
    1f86:	82 60       	ori	r24, 0x02	; 2
    1f88:	38 2e       	mov	r3, r24
    1f8a:	e3 2d       	mov	r30, r3
    1f8c:	e4 60       	ori	r30, 0x04	; 4
    1f8e:	3e 2e       	mov	r3, r30
    1f90:	2a c0       	rjmp	.+84     	; 0x1fe6 <vfprintf+0xe6>
    1f92:	f3 2d       	mov	r31, r3
    1f94:	f8 60       	ori	r31, 0x08	; 8
    1f96:	1d c0       	rjmp	.+58     	; 0x1fd2 <vfprintf+0xd2>
    1f98:	37 fc       	sbrc	r3, 7
    1f9a:	2d c0       	rjmp	.+90     	; 0x1ff6 <vfprintf+0xf6>
    1f9c:	20 ed       	ldi	r18, 0xD0	; 208
    1f9e:	28 0f       	add	r18, r24
    1fa0:	2a 30       	cpi	r18, 0x0A	; 10
    1fa2:	40 f0       	brcs	.+16     	; 0x1fb4 <vfprintf+0xb4>
    1fa4:	8e 32       	cpi	r24, 0x2E	; 46
    1fa6:	b9 f4       	brne	.+46     	; 0x1fd6 <vfprintf+0xd6>
    1fa8:	36 fc       	sbrc	r3, 6
    1faa:	81 c1       	rjmp	.+770    	; 0x22ae <vfprintf+0x3ae>
    1fac:	23 2d       	mov	r18, r3
    1fae:	20 64       	ori	r18, 0x40	; 64
    1fb0:	32 2e       	mov	r3, r18
    1fb2:	19 c0       	rjmp	.+50     	; 0x1fe6 <vfprintf+0xe6>
    1fb4:	36 fe       	sbrs	r3, 6
    1fb6:	06 c0       	rjmp	.+12     	; 0x1fc4 <vfprintf+0xc4>
    1fb8:	8a e0       	ldi	r24, 0x0A	; 10
    1fba:	98 9e       	mul	r9, r24
    1fbc:	20 0d       	add	r18, r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	92 2e       	mov	r9, r18
    1fc2:	11 c0       	rjmp	.+34     	; 0x1fe6 <vfprintf+0xe6>
    1fc4:	ea e0       	ldi	r30, 0x0A	; 10
    1fc6:	2e 9e       	mul	r2, r30
    1fc8:	20 0d       	add	r18, r0
    1fca:	11 24       	eor	r1, r1
    1fcc:	22 2e       	mov	r2, r18
    1fce:	f3 2d       	mov	r31, r3
    1fd0:	f0 62       	ori	r31, 0x20	; 32
    1fd2:	3f 2e       	mov	r3, r31
    1fd4:	08 c0       	rjmp	.+16     	; 0x1fe6 <vfprintf+0xe6>
    1fd6:	8c 36       	cpi	r24, 0x6C	; 108
    1fd8:	21 f4       	brne	.+8      	; 0x1fe2 <vfprintf+0xe2>
    1fda:	83 2d       	mov	r24, r3
    1fdc:	80 68       	ori	r24, 0x80	; 128
    1fde:	38 2e       	mov	r3, r24
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <vfprintf+0xe6>
    1fe2:	88 36       	cpi	r24, 0x68	; 104
    1fe4:	41 f4       	brne	.+16     	; 0x1ff6 <vfprintf+0xf6>
    1fe6:	f7 01       	movw	r30, r14
    1fe8:	93 fd       	sbrc	r25, 3
    1fea:	85 91       	lpm	r24, Z+
    1fec:	93 ff       	sbrs	r25, 3
    1fee:	81 91       	ld	r24, Z+
    1ff0:	7f 01       	movw	r14, r30
    1ff2:	81 11       	cpse	r24, r1
    1ff4:	b3 cf       	rjmp	.-154    	; 0x1f5c <vfprintf+0x5c>
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	9f 7d       	andi	r25, 0xDF	; 223
    1ffa:	95 54       	subi	r25, 0x45	; 69
    1ffc:	93 30       	cpi	r25, 0x03	; 3
    1ffe:	28 f4       	brcc	.+10     	; 0x200a <vfprintf+0x10a>
    2000:	0c 5f       	subi	r16, 0xFC	; 252
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	9f e3       	ldi	r25, 0x3F	; 63
    2006:	99 83       	std	Y+1, r25	; 0x01
    2008:	0d c0       	rjmp	.+26     	; 0x2024 <vfprintf+0x124>
    200a:	83 36       	cpi	r24, 0x63	; 99
    200c:	31 f0       	breq	.+12     	; 0x201a <vfprintf+0x11a>
    200e:	83 37       	cpi	r24, 0x73	; 115
    2010:	71 f0       	breq	.+28     	; 0x202e <vfprintf+0x12e>
    2012:	83 35       	cpi	r24, 0x53	; 83
    2014:	09 f0       	breq	.+2      	; 0x2018 <vfprintf+0x118>
    2016:	59 c0       	rjmp	.+178    	; 0x20ca <vfprintf+0x1ca>
    2018:	21 c0       	rjmp	.+66     	; 0x205c <vfprintf+0x15c>
    201a:	f8 01       	movw	r30, r16
    201c:	80 81       	ld	r24, Z
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	0e 5f       	subi	r16, 0xFE	; 254
    2022:	1f 4f       	sbci	r17, 0xFF	; 255
    2024:	88 24       	eor	r8, r8
    2026:	83 94       	inc	r8
    2028:	91 2c       	mov	r9, r1
    202a:	53 01       	movw	r10, r6
    202c:	13 c0       	rjmp	.+38     	; 0x2054 <vfprintf+0x154>
    202e:	28 01       	movw	r4, r16
    2030:	f2 e0       	ldi	r31, 0x02	; 2
    2032:	4f 0e       	add	r4, r31
    2034:	51 1c       	adc	r5, r1
    2036:	f8 01       	movw	r30, r16
    2038:	a0 80       	ld	r10, Z
    203a:	b1 80       	ldd	r11, Z+1	; 0x01
    203c:	36 fe       	sbrs	r3, 6
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <vfprintf+0x146>
    2040:	69 2d       	mov	r22, r9
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	02 c0       	rjmp	.+4      	; 0x204a <vfprintf+0x14a>
    2046:	6f ef       	ldi	r22, 0xFF	; 255
    2048:	7f ef       	ldi	r23, 0xFF	; 255
    204a:	c5 01       	movw	r24, r10
    204c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <strnlen>
    2050:	4c 01       	movw	r8, r24
    2052:	82 01       	movw	r16, r4
    2054:	f3 2d       	mov	r31, r3
    2056:	ff 77       	andi	r31, 0x7F	; 127
    2058:	3f 2e       	mov	r3, r31
    205a:	16 c0       	rjmp	.+44     	; 0x2088 <vfprintf+0x188>
    205c:	28 01       	movw	r4, r16
    205e:	22 e0       	ldi	r18, 0x02	; 2
    2060:	42 0e       	add	r4, r18
    2062:	51 1c       	adc	r5, r1
    2064:	f8 01       	movw	r30, r16
    2066:	a0 80       	ld	r10, Z
    2068:	b1 80       	ldd	r11, Z+1	; 0x01
    206a:	36 fe       	sbrs	r3, 6
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <vfprintf+0x174>
    206e:	69 2d       	mov	r22, r9
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <vfprintf+0x178>
    2074:	6f ef       	ldi	r22, 0xFF	; 255
    2076:	7f ef       	ldi	r23, 0xFF	; 255
    2078:	c5 01       	movw	r24, r10
    207a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <strnlen_P>
    207e:	4c 01       	movw	r8, r24
    2080:	f3 2d       	mov	r31, r3
    2082:	f0 68       	ori	r31, 0x80	; 128
    2084:	3f 2e       	mov	r3, r31
    2086:	82 01       	movw	r16, r4
    2088:	33 fc       	sbrc	r3, 3
    208a:	1b c0       	rjmp	.+54     	; 0x20c2 <vfprintf+0x1c2>
    208c:	82 2d       	mov	r24, r2
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	88 16       	cp	r8, r24
    2092:	99 06       	cpc	r9, r25
    2094:	b0 f4       	brcc	.+44     	; 0x20c2 <vfprintf+0x1c2>
    2096:	b6 01       	movw	r22, r12
    2098:	80 e2       	ldi	r24, 0x20	; 32
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0e 94 77 11 	call	0x22ee	; 0x22ee <fputc>
    20a0:	2a 94       	dec	r2
    20a2:	f4 cf       	rjmp	.-24     	; 0x208c <vfprintf+0x18c>
    20a4:	f5 01       	movw	r30, r10
    20a6:	37 fc       	sbrc	r3, 7
    20a8:	85 91       	lpm	r24, Z+
    20aa:	37 fe       	sbrs	r3, 7
    20ac:	81 91       	ld	r24, Z+
    20ae:	5f 01       	movw	r10, r30
    20b0:	b6 01       	movw	r22, r12
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	0e 94 77 11 	call	0x22ee	; 0x22ee <fputc>
    20b8:	21 10       	cpse	r2, r1
    20ba:	2a 94       	dec	r2
    20bc:	21 e0       	ldi	r18, 0x01	; 1
    20be:	82 1a       	sub	r8, r18
    20c0:	91 08       	sbc	r9, r1
    20c2:	81 14       	cp	r8, r1
    20c4:	91 04       	cpc	r9, r1
    20c6:	71 f7       	brne	.-36     	; 0x20a4 <vfprintf+0x1a4>
    20c8:	e8 c0       	rjmp	.+464    	; 0x229a <vfprintf+0x39a>
    20ca:	84 36       	cpi	r24, 0x64	; 100
    20cc:	11 f0       	breq	.+4      	; 0x20d2 <vfprintf+0x1d2>
    20ce:	89 36       	cpi	r24, 0x69	; 105
    20d0:	41 f5       	brne	.+80     	; 0x2122 <vfprintf+0x222>
    20d2:	f8 01       	movw	r30, r16
    20d4:	37 fe       	sbrs	r3, 7
    20d6:	07 c0       	rjmp	.+14     	; 0x20e6 <vfprintf+0x1e6>
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	0c 5f       	subi	r16, 0xFC	; 252
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
    20e4:	08 c0       	rjmp	.+16     	; 0x20f6 <vfprintf+0x1f6>
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	07 2e       	mov	r0, r23
    20ec:	00 0c       	add	r0, r0
    20ee:	88 0b       	sbc	r24, r24
    20f0:	99 0b       	sbc	r25, r25
    20f2:	0e 5f       	subi	r16, 0xFE	; 254
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	f3 2d       	mov	r31, r3
    20f8:	ff 76       	andi	r31, 0x6F	; 111
    20fa:	3f 2e       	mov	r3, r31
    20fc:	97 ff       	sbrs	r25, 7
    20fe:	09 c0       	rjmp	.+18     	; 0x2112 <vfprintf+0x212>
    2100:	90 95       	com	r25
    2102:	80 95       	com	r24
    2104:	70 95       	com	r23
    2106:	61 95       	neg	r22
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	8f 4f       	sbci	r24, 0xFF	; 255
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	f0 68       	ori	r31, 0x80	; 128
    2110:	3f 2e       	mov	r3, r31
    2112:	2a e0       	ldi	r18, 0x0A	; 10
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	a3 01       	movw	r20, r6
    2118:	0e 94 b3 11 	call	0x2366	; 0x2366 <__ultoa_invert>
    211c:	88 2e       	mov	r8, r24
    211e:	86 18       	sub	r8, r6
    2120:	45 c0       	rjmp	.+138    	; 0x21ac <vfprintf+0x2ac>
    2122:	85 37       	cpi	r24, 0x75	; 117
    2124:	31 f4       	brne	.+12     	; 0x2132 <vfprintf+0x232>
    2126:	23 2d       	mov	r18, r3
    2128:	2f 7e       	andi	r18, 0xEF	; 239
    212a:	b2 2e       	mov	r11, r18
    212c:	2a e0       	ldi	r18, 0x0A	; 10
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	25 c0       	rjmp	.+74     	; 0x217c <vfprintf+0x27c>
    2132:	93 2d       	mov	r25, r3
    2134:	99 7f       	andi	r25, 0xF9	; 249
    2136:	b9 2e       	mov	r11, r25
    2138:	8f 36       	cpi	r24, 0x6F	; 111
    213a:	c1 f0       	breq	.+48     	; 0x216c <vfprintf+0x26c>
    213c:	18 f4       	brcc	.+6      	; 0x2144 <vfprintf+0x244>
    213e:	88 35       	cpi	r24, 0x58	; 88
    2140:	79 f0       	breq	.+30     	; 0x2160 <vfprintf+0x260>
    2142:	b5 c0       	rjmp	.+362    	; 0x22ae <vfprintf+0x3ae>
    2144:	80 37       	cpi	r24, 0x70	; 112
    2146:	19 f0       	breq	.+6      	; 0x214e <vfprintf+0x24e>
    2148:	88 37       	cpi	r24, 0x78	; 120
    214a:	21 f0       	breq	.+8      	; 0x2154 <vfprintf+0x254>
    214c:	b0 c0       	rjmp	.+352    	; 0x22ae <vfprintf+0x3ae>
    214e:	e9 2f       	mov	r30, r25
    2150:	e0 61       	ori	r30, 0x10	; 16
    2152:	be 2e       	mov	r11, r30
    2154:	b4 fe       	sbrs	r11, 4
    2156:	0d c0       	rjmp	.+26     	; 0x2172 <vfprintf+0x272>
    2158:	fb 2d       	mov	r31, r11
    215a:	f4 60       	ori	r31, 0x04	; 4
    215c:	bf 2e       	mov	r11, r31
    215e:	09 c0       	rjmp	.+18     	; 0x2172 <vfprintf+0x272>
    2160:	34 fe       	sbrs	r3, 4
    2162:	0a c0       	rjmp	.+20     	; 0x2178 <vfprintf+0x278>
    2164:	29 2f       	mov	r18, r25
    2166:	26 60       	ori	r18, 0x06	; 6
    2168:	b2 2e       	mov	r11, r18
    216a:	06 c0       	rjmp	.+12     	; 0x2178 <vfprintf+0x278>
    216c:	28 e0       	ldi	r18, 0x08	; 8
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	05 c0       	rjmp	.+10     	; 0x217c <vfprintf+0x27c>
    2172:	20 e1       	ldi	r18, 0x10	; 16
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	02 c0       	rjmp	.+4      	; 0x217c <vfprintf+0x27c>
    2178:	20 e1       	ldi	r18, 0x10	; 16
    217a:	32 e0       	ldi	r19, 0x02	; 2
    217c:	f8 01       	movw	r30, r16
    217e:	b7 fe       	sbrs	r11, 7
    2180:	07 c0       	rjmp	.+14     	; 0x2190 <vfprintf+0x290>
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	0c 5f       	subi	r16, 0xFC	; 252
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	06 c0       	rjmp	.+12     	; 0x219c <vfprintf+0x29c>
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 5f       	subi	r16, 0xFE	; 254
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	a3 01       	movw	r20, r6
    219e:	0e 94 b3 11 	call	0x2366	; 0x2366 <__ultoa_invert>
    21a2:	88 2e       	mov	r8, r24
    21a4:	86 18       	sub	r8, r6
    21a6:	fb 2d       	mov	r31, r11
    21a8:	ff 77       	andi	r31, 0x7F	; 127
    21aa:	3f 2e       	mov	r3, r31
    21ac:	36 fe       	sbrs	r3, 6
    21ae:	0d c0       	rjmp	.+26     	; 0x21ca <vfprintf+0x2ca>
    21b0:	23 2d       	mov	r18, r3
    21b2:	2e 7f       	andi	r18, 0xFE	; 254
    21b4:	a2 2e       	mov	r10, r18
    21b6:	89 14       	cp	r8, r9
    21b8:	58 f4       	brcc	.+22     	; 0x21d0 <vfprintf+0x2d0>
    21ba:	34 fe       	sbrs	r3, 4
    21bc:	0b c0       	rjmp	.+22     	; 0x21d4 <vfprintf+0x2d4>
    21be:	32 fc       	sbrc	r3, 2
    21c0:	09 c0       	rjmp	.+18     	; 0x21d4 <vfprintf+0x2d4>
    21c2:	83 2d       	mov	r24, r3
    21c4:	8e 7e       	andi	r24, 0xEE	; 238
    21c6:	a8 2e       	mov	r10, r24
    21c8:	05 c0       	rjmp	.+10     	; 0x21d4 <vfprintf+0x2d4>
    21ca:	b8 2c       	mov	r11, r8
    21cc:	a3 2c       	mov	r10, r3
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <vfprintf+0x2d6>
    21d0:	b8 2c       	mov	r11, r8
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <vfprintf+0x2d6>
    21d4:	b9 2c       	mov	r11, r9
    21d6:	a4 fe       	sbrs	r10, 4
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <vfprintf+0x2f8>
    21da:	fe 01       	movw	r30, r28
    21dc:	e8 0d       	add	r30, r8
    21de:	f1 1d       	adc	r31, r1
    21e0:	80 81       	ld	r24, Z
    21e2:	80 33       	cpi	r24, 0x30	; 48
    21e4:	21 f4       	brne	.+8      	; 0x21ee <vfprintf+0x2ee>
    21e6:	9a 2d       	mov	r25, r10
    21e8:	99 7e       	andi	r25, 0xE9	; 233
    21ea:	a9 2e       	mov	r10, r25
    21ec:	09 c0       	rjmp	.+18     	; 0x2200 <vfprintf+0x300>
    21ee:	a2 fe       	sbrs	r10, 2
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <vfprintf+0x2fe>
    21f2:	b3 94       	inc	r11
    21f4:	b3 94       	inc	r11
    21f6:	04 c0       	rjmp	.+8      	; 0x2200 <vfprintf+0x300>
    21f8:	8a 2d       	mov	r24, r10
    21fa:	86 78       	andi	r24, 0x86	; 134
    21fc:	09 f0       	breq	.+2      	; 0x2200 <vfprintf+0x300>
    21fe:	b3 94       	inc	r11
    2200:	a3 fc       	sbrc	r10, 3
    2202:	11 c0       	rjmp	.+34     	; 0x2226 <vfprintf+0x326>
    2204:	a0 fe       	sbrs	r10, 0
    2206:	06 c0       	rjmp	.+12     	; 0x2214 <vfprintf+0x314>
    2208:	b2 14       	cp	r11, r2
    220a:	88 f4       	brcc	.+34     	; 0x222e <vfprintf+0x32e>
    220c:	28 0c       	add	r2, r8
    220e:	92 2c       	mov	r9, r2
    2210:	9b 18       	sub	r9, r11
    2212:	0e c0       	rjmp	.+28     	; 0x2230 <vfprintf+0x330>
    2214:	b2 14       	cp	r11, r2
    2216:	60 f4       	brcc	.+24     	; 0x2230 <vfprintf+0x330>
    2218:	b6 01       	movw	r22, r12
    221a:	80 e2       	ldi	r24, 0x20	; 32
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 77 11 	call	0x22ee	; 0x22ee <fputc>
    2222:	b3 94       	inc	r11
    2224:	f7 cf       	rjmp	.-18     	; 0x2214 <vfprintf+0x314>
    2226:	b2 14       	cp	r11, r2
    2228:	18 f4       	brcc	.+6      	; 0x2230 <vfprintf+0x330>
    222a:	2b 18       	sub	r2, r11
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <vfprintf+0x332>
    222e:	98 2c       	mov	r9, r8
    2230:	21 2c       	mov	r2, r1
    2232:	a4 fe       	sbrs	r10, 4
    2234:	10 c0       	rjmp	.+32     	; 0x2256 <vfprintf+0x356>
    2236:	b6 01       	movw	r22, r12
    2238:	80 e3       	ldi	r24, 0x30	; 48
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	0e 94 77 11 	call	0x22ee	; 0x22ee <fputc>
    2240:	a2 fe       	sbrs	r10, 2
    2242:	17 c0       	rjmp	.+46     	; 0x2272 <vfprintf+0x372>
    2244:	a1 fc       	sbrc	r10, 1
    2246:	03 c0       	rjmp	.+6      	; 0x224e <vfprintf+0x34e>
    2248:	88 e7       	ldi	r24, 0x78	; 120
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <vfprintf+0x352>
    224e:	88 e5       	ldi	r24, 0x58	; 88
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	b6 01       	movw	r22, r12
    2254:	0c c0       	rjmp	.+24     	; 0x226e <vfprintf+0x36e>
    2256:	8a 2d       	mov	r24, r10
    2258:	86 78       	andi	r24, 0x86	; 134
    225a:	59 f0       	breq	.+22     	; 0x2272 <vfprintf+0x372>
    225c:	a1 fe       	sbrs	r10, 1
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <vfprintf+0x364>
    2260:	8b e2       	ldi	r24, 0x2B	; 43
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <vfprintf+0x366>
    2264:	80 e2       	ldi	r24, 0x20	; 32
    2266:	a7 fc       	sbrc	r10, 7
    2268:	8d e2       	ldi	r24, 0x2D	; 45
    226a:	b6 01       	movw	r22, r12
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 77 11 	call	0x22ee	; 0x22ee <fputc>
    2272:	89 14       	cp	r8, r9
    2274:	38 f4       	brcc	.+14     	; 0x2284 <vfprintf+0x384>
    2276:	b6 01       	movw	r22, r12
    2278:	80 e3       	ldi	r24, 0x30	; 48
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 77 11 	call	0x22ee	; 0x22ee <fputc>
    2280:	9a 94       	dec	r9
    2282:	f7 cf       	rjmp	.-18     	; 0x2272 <vfprintf+0x372>
    2284:	8a 94       	dec	r8
    2286:	f3 01       	movw	r30, r6
    2288:	e8 0d       	add	r30, r8
    228a:	f1 1d       	adc	r31, r1
    228c:	80 81       	ld	r24, Z
    228e:	b6 01       	movw	r22, r12
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 77 11 	call	0x22ee	; 0x22ee <fputc>
    2296:	81 10       	cpse	r8, r1
    2298:	f5 cf       	rjmp	.-22     	; 0x2284 <vfprintf+0x384>
    229a:	22 20       	and	r2, r2
    229c:	09 f4       	brne	.+2      	; 0x22a0 <vfprintf+0x3a0>
    229e:	42 ce       	rjmp	.-892    	; 0x1f24 <vfprintf+0x24>
    22a0:	b6 01       	movw	r22, r12
    22a2:	80 e2       	ldi	r24, 0x20	; 32
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 77 11 	call	0x22ee	; 0x22ee <fputc>
    22aa:	2a 94       	dec	r2
    22ac:	f6 cf       	rjmp	.-20     	; 0x229a <vfprintf+0x39a>
    22ae:	f6 01       	movw	r30, r12
    22b0:	86 81       	ldd	r24, Z+6	; 0x06
    22b2:	97 81       	ldd	r25, Z+7	; 0x07
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <vfprintf+0x3ba>
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	2b 96       	adiw	r28, 0x0b	; 11
    22bc:	e2 e1       	ldi	r30, 0x12	; 18
    22be:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__>

000022c2 <strnlen_P>:
    22c2:	fc 01       	movw	r30, r24
    22c4:	05 90       	lpm	r0, Z+
    22c6:	61 50       	subi	r22, 0x01	; 1
    22c8:	70 40       	sbci	r23, 0x00	; 0
    22ca:	01 10       	cpse	r0, r1
    22cc:	d8 f7       	brcc	.-10     	; 0x22c4 <strnlen_P+0x2>
    22ce:	80 95       	com	r24
    22d0:	90 95       	com	r25
    22d2:	8e 0f       	add	r24, r30
    22d4:	9f 1f       	adc	r25, r31
    22d6:	08 95       	ret

000022d8 <strnlen>:
    22d8:	fc 01       	movw	r30, r24
    22da:	61 50       	subi	r22, 0x01	; 1
    22dc:	70 40       	sbci	r23, 0x00	; 0
    22de:	01 90       	ld	r0, Z+
    22e0:	01 10       	cpse	r0, r1
    22e2:	d8 f7       	brcc	.-10     	; 0x22da <strnlen+0x2>
    22e4:	80 95       	com	r24
    22e6:	90 95       	com	r25
    22e8:	8e 0f       	add	r24, r30
    22ea:	9f 1f       	adc	r25, r31
    22ec:	08 95       	ret

000022ee <fputc>:
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	fb 01       	movw	r30, r22
    22f8:	23 81       	ldd	r18, Z+3	; 0x03
    22fa:	21 fd       	sbrc	r18, 1
    22fc:	03 c0       	rjmp	.+6      	; 0x2304 <fputc+0x16>
    22fe:	8f ef       	ldi	r24, 0xFF	; 255
    2300:	9f ef       	ldi	r25, 0xFF	; 255
    2302:	2c c0       	rjmp	.+88     	; 0x235c <fputc+0x6e>
    2304:	22 ff       	sbrs	r18, 2
    2306:	16 c0       	rjmp	.+44     	; 0x2334 <fputc+0x46>
    2308:	46 81       	ldd	r20, Z+6	; 0x06
    230a:	57 81       	ldd	r21, Z+7	; 0x07
    230c:	24 81       	ldd	r18, Z+4	; 0x04
    230e:	35 81       	ldd	r19, Z+5	; 0x05
    2310:	42 17       	cp	r20, r18
    2312:	53 07       	cpc	r21, r19
    2314:	44 f4       	brge	.+16     	; 0x2326 <fputc+0x38>
    2316:	a0 81       	ld	r26, Z
    2318:	b1 81       	ldd	r27, Z+1	; 0x01
    231a:	9d 01       	movw	r18, r26
    231c:	2f 5f       	subi	r18, 0xFF	; 255
    231e:	3f 4f       	sbci	r19, 0xFF	; 255
    2320:	31 83       	std	Z+1, r19	; 0x01
    2322:	20 83       	st	Z, r18
    2324:	8c 93       	st	X, r24
    2326:	26 81       	ldd	r18, Z+6	; 0x06
    2328:	37 81       	ldd	r19, Z+7	; 0x07
    232a:	2f 5f       	subi	r18, 0xFF	; 255
    232c:	3f 4f       	sbci	r19, 0xFF	; 255
    232e:	37 83       	std	Z+7, r19	; 0x07
    2330:	26 83       	std	Z+6, r18	; 0x06
    2332:	14 c0       	rjmp	.+40     	; 0x235c <fputc+0x6e>
    2334:	8b 01       	movw	r16, r22
    2336:	ec 01       	movw	r28, r24
    2338:	fb 01       	movw	r30, r22
    233a:	00 84       	ldd	r0, Z+8	; 0x08
    233c:	f1 85       	ldd	r31, Z+9	; 0x09
    233e:	e0 2d       	mov	r30, r0
    2340:	09 95       	icall
    2342:	89 2b       	or	r24, r25
    2344:	e1 f6       	brne	.-72     	; 0x22fe <fputc+0x10>
    2346:	d8 01       	movw	r26, r16
    2348:	16 96       	adiw	r26, 0x06	; 6
    234a:	8d 91       	ld	r24, X+
    234c:	9c 91       	ld	r25, X
    234e:	17 97       	sbiw	r26, 0x07	; 7
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	17 96       	adiw	r26, 0x07	; 7
    2354:	9c 93       	st	X, r25
    2356:	8e 93       	st	-X, r24
    2358:	16 97       	sbiw	r26, 0x06	; 6
    235a:	ce 01       	movw	r24, r28
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <__ultoa_invert>:
    2366:	fa 01       	movw	r30, r20
    2368:	aa 27       	eor	r26, r26
    236a:	28 30       	cpi	r18, 0x08	; 8
    236c:	51 f1       	breq	.+84     	; 0x23c2 <__ultoa_invert+0x5c>
    236e:	20 31       	cpi	r18, 0x10	; 16
    2370:	81 f1       	breq	.+96     	; 0x23d2 <__ultoa_invert+0x6c>
    2372:	e8 94       	clt
    2374:	6f 93       	push	r22
    2376:	6e 7f       	andi	r22, 0xFE	; 254
    2378:	6e 5f       	subi	r22, 0xFE	; 254
    237a:	7f 4f       	sbci	r23, 0xFF	; 255
    237c:	8f 4f       	sbci	r24, 0xFF	; 255
    237e:	9f 4f       	sbci	r25, 0xFF	; 255
    2380:	af 4f       	sbci	r26, 0xFF	; 255
    2382:	b1 e0       	ldi	r27, 0x01	; 1
    2384:	3e d0       	rcall	.+124    	; 0x2402 <__ultoa_invert+0x9c>
    2386:	b4 e0       	ldi	r27, 0x04	; 4
    2388:	3c d0       	rcall	.+120    	; 0x2402 <__ultoa_invert+0x9c>
    238a:	67 0f       	add	r22, r23
    238c:	78 1f       	adc	r23, r24
    238e:	89 1f       	adc	r24, r25
    2390:	9a 1f       	adc	r25, r26
    2392:	a1 1d       	adc	r26, r1
    2394:	68 0f       	add	r22, r24
    2396:	79 1f       	adc	r23, r25
    2398:	8a 1f       	adc	r24, r26
    239a:	91 1d       	adc	r25, r1
    239c:	a1 1d       	adc	r26, r1
    239e:	6a 0f       	add	r22, r26
    23a0:	71 1d       	adc	r23, r1
    23a2:	81 1d       	adc	r24, r1
    23a4:	91 1d       	adc	r25, r1
    23a6:	a1 1d       	adc	r26, r1
    23a8:	20 d0       	rcall	.+64     	; 0x23ea <__ultoa_invert+0x84>
    23aa:	09 f4       	brne	.+2      	; 0x23ae <__ultoa_invert+0x48>
    23ac:	68 94       	set
    23ae:	3f 91       	pop	r19
    23b0:	2a e0       	ldi	r18, 0x0A	; 10
    23b2:	26 9f       	mul	r18, r22
    23b4:	11 24       	eor	r1, r1
    23b6:	30 19       	sub	r19, r0
    23b8:	30 5d       	subi	r19, 0xD0	; 208
    23ba:	31 93       	st	Z+, r19
    23bc:	de f6       	brtc	.-74     	; 0x2374 <__ultoa_invert+0xe>
    23be:	cf 01       	movw	r24, r30
    23c0:	08 95       	ret
    23c2:	46 2f       	mov	r20, r22
    23c4:	47 70       	andi	r20, 0x07	; 7
    23c6:	40 5d       	subi	r20, 0xD0	; 208
    23c8:	41 93       	st	Z+, r20
    23ca:	b3 e0       	ldi	r27, 0x03	; 3
    23cc:	0f d0       	rcall	.+30     	; 0x23ec <__ultoa_invert+0x86>
    23ce:	c9 f7       	brne	.-14     	; 0x23c2 <__ultoa_invert+0x5c>
    23d0:	f6 cf       	rjmp	.-20     	; 0x23be <__ultoa_invert+0x58>
    23d2:	46 2f       	mov	r20, r22
    23d4:	4f 70       	andi	r20, 0x0F	; 15
    23d6:	40 5d       	subi	r20, 0xD0	; 208
    23d8:	4a 33       	cpi	r20, 0x3A	; 58
    23da:	18 f0       	brcs	.+6      	; 0x23e2 <__ultoa_invert+0x7c>
    23dc:	49 5d       	subi	r20, 0xD9	; 217
    23de:	31 fd       	sbrc	r19, 1
    23e0:	40 52       	subi	r20, 0x20	; 32
    23e2:	41 93       	st	Z+, r20
    23e4:	02 d0       	rcall	.+4      	; 0x23ea <__ultoa_invert+0x84>
    23e6:	a9 f7       	brne	.-22     	; 0x23d2 <__ultoa_invert+0x6c>
    23e8:	ea cf       	rjmp	.-44     	; 0x23be <__ultoa_invert+0x58>
    23ea:	b4 e0       	ldi	r27, 0x04	; 4
    23ec:	a6 95       	lsr	r26
    23ee:	97 95       	ror	r25
    23f0:	87 95       	ror	r24
    23f2:	77 95       	ror	r23
    23f4:	67 95       	ror	r22
    23f6:	ba 95       	dec	r27
    23f8:	c9 f7       	brne	.-14     	; 0x23ec <__ultoa_invert+0x86>
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	61 05       	cpc	r22, r1
    23fe:	71 05       	cpc	r23, r1
    2400:	08 95       	ret
    2402:	9b 01       	movw	r18, r22
    2404:	ac 01       	movw	r20, r24
    2406:	0a 2e       	mov	r0, r26
    2408:	06 94       	lsr	r0
    240a:	57 95       	ror	r21
    240c:	47 95       	ror	r20
    240e:	37 95       	ror	r19
    2410:	27 95       	ror	r18
    2412:	ba 95       	dec	r27
    2414:	c9 f7       	brne	.-14     	; 0x2408 <__ultoa_invert+0xa2>
    2416:	62 0f       	add	r22, r18
    2418:	73 1f       	adc	r23, r19
    241a:	84 1f       	adc	r24, r20
    241c:	95 1f       	adc	r25, r21
    241e:	a0 1d       	adc	r26, r0
    2420:	08 95       	ret

00002422 <__prologue_saves__>:
    2422:	2f 92       	push	r2
    2424:	3f 92       	push	r3
    2426:	4f 92       	push	r4
    2428:	5f 92       	push	r5
    242a:	6f 92       	push	r6
    242c:	7f 92       	push	r7
    242e:	8f 92       	push	r8
    2430:	9f 92       	push	r9
    2432:	af 92       	push	r10
    2434:	bf 92       	push	r11
    2436:	cf 92       	push	r12
    2438:	df 92       	push	r13
    243a:	ef 92       	push	r14
    243c:	ff 92       	push	r15
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	ca 1b       	sub	r28, r26
    244c:	db 0b       	sbc	r29, r27
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	09 94       	ijmp

0000245a <__epilogue_restores__>:
    245a:	2a 88       	ldd	r2, Y+18	; 0x12
    245c:	39 88       	ldd	r3, Y+17	; 0x11
    245e:	48 88       	ldd	r4, Y+16	; 0x10
    2460:	5f 84       	ldd	r5, Y+15	; 0x0f
    2462:	6e 84       	ldd	r6, Y+14	; 0x0e
    2464:	7d 84       	ldd	r7, Y+13	; 0x0d
    2466:	8c 84       	ldd	r8, Y+12	; 0x0c
    2468:	9b 84       	ldd	r9, Y+11	; 0x0b
    246a:	aa 84       	ldd	r10, Y+10	; 0x0a
    246c:	b9 84       	ldd	r11, Y+9	; 0x09
    246e:	c8 84       	ldd	r12, Y+8	; 0x08
    2470:	df 80       	ldd	r13, Y+7	; 0x07
    2472:	ee 80       	ldd	r14, Y+6	; 0x06
    2474:	fd 80       	ldd	r15, Y+5	; 0x05
    2476:	0c 81       	ldd	r16, Y+4	; 0x04
    2478:	1b 81       	ldd	r17, Y+3	; 0x03
    247a:	aa 81       	ldd	r26, Y+2	; 0x02
    247c:	b9 81       	ldd	r27, Y+1	; 0x01
    247e:	ce 0f       	add	r28, r30
    2480:	d1 1d       	adc	r29, r1
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	ed 01       	movw	r28, r26
    248e:	08 95       	ret

00002490 <_exit>:
    2490:	f8 94       	cli

00002492 <__stop_program>:
    2492:	ff cf       	rjmp	.-2      	; 0x2492 <__stop_program>
